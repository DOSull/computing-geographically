[
  {
    "objectID": "other-stuff/about-the-cover.html",
    "href": "other-stuff/about-the-cover.html",
    "title": "About the cover",
    "section": "",
    "text": "Update History\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nChanges\n\n\n\n\n2023-11-04\nAdded small image of the final cover to preamble.\n\n\n2023-10-25\nRemoved offsetting to centre of NZTM projection. Added Update history.\n\n\n2023-10-24\nInverted coordinates to make landscape images.\n\n\n2023-10-19\nInitial post.\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "other-stuff/about-the-cover.html#the-idea-behind-the-cover",
    "href": "other-stuff/about-the-cover.html#the-idea-behind-the-cover",
    "title": "About the cover",
    "section": "The idea behind the cover",
    "text": "The idea behind the cover\nLoosely speaking the cover mirrors the sequence from simple location to world as relational process that the book recounts. A set of relationally interacting, moving, simple locations converge to become a Whitehead-ian ‘society of actual occasions’. If you have no idea what I’m on about, you’ll have to read the book…\nIn any case, I like how the artwork looks, and so did the publisher!\nHere’s how I made it (flipped to landscape mode so you get bigger pictures)."
  },
  {
    "objectID": "other-stuff/about-the-cover.html#a-flocking-model",
    "href": "other-stuff/about-the-cover.html#a-flocking-model",
    "title": "About the cover",
    "section": "A flocking model",
    "text": "A flocking model\nThe starting point was a flocking model, which is discussed in Chapter 8 of the book, in §Agent-Based Models, but also makes an appearance in Figure 7.7. This model was previously made for my earlier book Spatial Simulation written with George Perry, which you can find all about here. Specifically this NetLogo model appears in the model zoo, as an implementation of ideas in these papers\n\nCzirók A and T Vicsek. 2000. Collective behavior of interacting self-propelled particles. Physica A: Statistical Mechanics and its Applications 281 17–29.\n\n\nGrégoire G, H Chaté and Y Tu. 2003. Moving and staying together without a leader. Physica D: Nonlinear Phenomena 181 157–70.\n\n\nVicsek T, A Czirók, E Ben-Jacob, I Cohen and O Sochet. 1995. Novel type of phase transition in a system of self-driven particles. Physical Review Letters 75 1226–29.\n\nYou can play with a—rather slow, because the web version is slow—version of that model here. If you download and run it locally, you’ll find some commented out code at the end that implements a save-history procedure that means you can run the model for a bit then get a CSV file with who, x, y, and t output for the flockers, which is the basis for the cover art. who is NetLogo’s endearing default variable name that we would more often think of as ‘ID’ or similar. It’s because the moving things in NetLogo are turtles, not mere simple locations. This puts me in mind of Gillian Rose and Torsten Hägerstrand’s thoughts on the living bodies at the tips of space-time paths, as discussed in §Limits to Time Geography in Chapter 7."
  },
  {
    "objectID": "other-stuff/about-the-cover.html#the-space-time-traces",
    "href": "other-stuff/about-the-cover.html#the-space-time-traces",
    "title": "About the cover",
    "section": "The space-time traces",
    "text": "The space-time traces\nSo, after importing some packages, read in one of those output files. There’s an example here, should you wish to make your own alternative cover.\n\n\nCode\nlibrary(sf)\nlibrary(tmap)\nlibrary(dplyr)\nlibrary(units)\n\nxy &lt;- read.table(\"traces.csv\", sep = \" \", header = TRUE)\n\n\nWe don’t need all the time steps in that file, so cut it down a bit and convert into a simple features dataset. You’ll note that even though these are not real world data (this is a book cover after all) I have to assign a projection, so that some of the later steps in the process will cooperate. The curse of geodetic accuracy strikes again!\n\n\nCode\nsteps &lt;- seq(1, 50, 1)\n\nxy_sf &lt;- xy |&gt;\n  filter(t %in% steps) |&gt;\n  st_as_sf(coords = c(\"y\", \"x\"), crs = 2193)\n\n\nBefore we go any further, we need a ‘frame’ for all the layers we’ll be using, so this is made from the extent of the included points, inset a little. Insetting avoids some otherwise strange edge effects.\n\n\nCode\nxy_inset &lt;- xy_sf |&gt;\n  st_bbox() |&gt;\n  st_as_sfc() |&gt;\n  st_sf() |&gt;\n  st_set_crs(2193) |&gt;\n  st_buffer(-.5)\n\n\nThe underlying basis of the cover art is those traces, which we need to form into a lines dataset and clip to the frame.\n\n\nCode\nxy_path &lt;- xy_sf |&gt;\n  group_by(who) |&gt;\n  summarise(do_union = FALSE) |&gt;\n  st_cast(\"LINESTRING\") |&gt; \n  st_intersection(xy_inset)\n\n\nSo this is what we’ve got so far:\n\n\nCode\ntm_shape(xy_path) + \n  tm_lines(lwd = 0.5)"
  },
  {
    "objectID": "other-stuff/about-the-cover.html#voronoi-polygons-of-the-trajectory-points",
    "href": "other-stuff/about-the-cover.html#voronoi-polygons-of-the-trajectory-points",
    "title": "About the cover",
    "section": "Voronoi polygons of the trajectory points",
    "text": "Voronoi polygons of the trajectory points\nProbably you can tell that some Voronoi magic was involved, specifically Voronoi polygons of the points along the trajectories, in a manner reminiscent of the Voronois along the road centre line in Figure 2.8.\n\n\nCode\nxy_vor &lt;- xy_sf |&gt;\n  st_union() |&gt;\n  st_voronoi() |&gt;\n  st_cast() |&gt;\n  data.frame() |&gt;\n  st_as_sf() |&gt;\n  st_join(xy_sf) |&gt;\n  st_intersection(xy_inset) |&gt;\n  distinct(geometry)\n\n\nAnd here is what we have got so far:\n\n\nCode\ntm_shape(xy_vor) +\n  tm_borders(col = \"blue\", lwd = 0.35) +\n  tm_shape(xy_path) + \n  tm_lines(lwd = 0.5)\n\n\n\n\n\n\n\n\n\nwhich is already pretty interesting looking."
  },
  {
    "objectID": "other-stuff/about-the-cover.html#overlapping-voronoi-polygons",
    "href": "other-stuff/about-the-cover.html#overlapping-voronoi-polygons",
    "title": "About the cover",
    "section": "Overlapping Voronoi polygons",
    "text": "Overlapping Voronoi polygons\nThe cover depends on overlapping the Voronoi polygons, which when coloured with some transparency gives the final effect. So some buffering (the original sin of GIS!) required. I decided after much experimentation to make the buffers larger for the bigger polygons.\n\n\nCode\nxy_vor_b &lt;- xy_vor |&gt;\n  mutate(area = st_area(geometry), r = as_units(.25, \"m\") + sqrt(area / pi)) %&gt;%\n  ## Note we need the tidyverse pipe here for the . placeholder\n  st_buffer(dist = .$r) |&gt;\n  st_intersection(xy_inset)\n\n\nIn itself this is also interesting to look at:\n\n\nCode\ntm_shape(xy_vor_b) + \n  tm_borders(lwd = 0.15)"
  },
  {
    "objectID": "other-stuff/about-the-cover.html#putting-it-all-together",
    "href": "other-stuff/about-the-cover.html#putting-it-all-together",
    "title": "About the cover",
    "section": "Putting it all together",
    "text": "Putting it all together\nArmed with those three layers, we can do all kinds of interesting compositions. It’s fun to play with the colour palettes, the transparency, the direction of the ramps, and any number of other things. Here’s what I wound up using:\n\n\nCode\ntm_shape(xy_vor_b)  +\n  tm_polygons(col = \"r\", alpha = 0.3, style = \"cont\", lwd = 0,\n              palette = \"-plasma\", legend.show = FALSE) +\n  tm_shape(xy_vor) +\n  tm_borders(col = \"white\", alpha = 0.35, lwd = 0.35) +\n  tm_shape(xy_path) +\n  tm_lines(col = \"white\", palette = \"Blues\", lwd = 1, alpha = 0.5) +\n  tm_layout(frame = FALSE, bg.color = \"white\")"
  },
  {
    "objectID": "other-stuff/about-the-cover.html#other-computational-art-in-r",
    "href": "other-stuff/about-the-cover.html#other-computational-art-in-r",
    "title": "About the cover",
    "section": "Other computational art in R",
    "text": "Other computational art in R\nComputational ‘generative’ art is a lot of fun. I’d have to rewrite that NetLogo model in R to make this truly an example of generative art in R, but en route to this approach I found some interesting resources here, particularly\n\nNicola Rennie’s ‘Rtistry’\nKoen Derks’s aRtsy package\n\nIn the end I preferred the greater control that my own ‘tool-chain’ gave me.\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "other-stuff/questions-for-discussion.html",
    "href": "other-stuff/questions-for-discussion.html",
    "title": "There are no silly questions",
    "section": "",
    "text": "Update History\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nChanges\n\n\n\n\n2024-11-16\nRemoved annoying hand gestures images. Some questions for chapters 4, 5, 6, 7, and 8 added\n\n\n2024-06-16\nInitial post. Questions for chapters 1, 2, and 3 added\nThis post is simply to direct your attention to the ‘Questions for discussion’ pages that I’ve started adding to each chapter section. I’ve added some questions for Chapters 1, 2 and 3 so far, with more to come.\nHere, I present some overall questions about the whole book.\nIs ‘bridging’ the right metaphor? Others have been suggested, the much more uncomfortable sounding ‘straddling’ for example.1 Consider what a need to bridge implies.\nIs the ‘bridge’ in this book a two-way street? Is anyone building from the other side?\nBack in the first chapter, I suggested that the chapter order could have been reversed, working from the world out there in all its magnificent processual, dynamic, connected complexity, and peeling away to layers to show we got to the ‘geoatom’, so…\nHaving got to the end of the book, would that have worked better, do you think?\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "other-stuff/questions-for-discussion.html#footnotes",
    "href": "other-stuff/questions-for-discussion.html#footnotes",
    "title": "There are no silly questions",
    "section": "References",
    "text": "References\n\n\nSchuurman N. 1999. An interview with Michael Goodchild, January 6, 1998, Santa Barbara, California. Environment and Planning D: Society and Space 17(1) 3–15. doi: 10.1068/d170003.↩︎"
  },
  {
    "objectID": "other-stuff/thinking-geographically.html",
    "href": "other-stuff/thinking-geographically.html",
    "title": "Thinking geographically",
    "section": "",
    "text": "Update History\n\n\n\n\n\n\n\n\nDate\nChanges\n\n\n\n\n2024-04-25\nAdded GLaD podcast logo and link to episode.\n\n\n2024-01-14\nCorrected some typos, and minor edits for flow.\n\n\n2024-01-13\nInitial post.\nI’m due to be on the Geography, Life, and Data (GLaD) podcast and an obvious question I’ve been asked to think about is how I landed on the list of ‘big ideas’ that form the themes for the seven core chapters in the book. Doing so, I recalled an important source of inspiration that has somehow evaded mention in the book itself. One thought leads to another and I also recalled a couple of related notions—phrases as much as anything, although there is more to them than that—which also nudged me in the direction the book eventually took me.\nUpdate: here’s the podcast episode: Computing geographically with David O’Sullivan.\nAnyway, I thought since the book is almost upon us (I’m told by Guilford that 12 copies are on their way as I write) that I’d provide some insights on where it came from.\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "other-stuff/thinking-geographically.html#seeing-like-a",
    "href": "other-stuff/thinking-geographically.html#seeing-like-a",
    "title": "Thinking geographically",
    "section": "Seeing like a …",
    "text": "Seeing like a …\nJames Scott’s Seeing Like a State1 is … well, it’s one of those books the existence of which is an argument for the importance of books. Once read, it can’t be unread. The opening section on modern forestry instantly makes sense and gives the gist of the argument very quickly. It’s certainly possible to disagree with the idea that all attempts at centralisation are doomed to fail2 as they erase local knowledge, flatten out difference missing key details, oversimplify, and land us in all kinds of trouble via unintended consequences. Saying that, it’s hard to think of any scientific or technical advance that hasn’t led us at least some of the way down this well trodden path. It’s hard here not to pick up an echo of Whithead’s “Fallacy of Misplaced Concreteness” (yup… he capitalised it) which is discussed in the context of process philosophies in my Chapter 8.\nBut never mind all that: what about that title?! For a long time, I wanted to somehow make the title Seeing Like a Geographer work for my book, and Seeing Geographically was also in the running. Sadly, neither was a good fit for what the book actually became. I did once manage to crowbar the ‘Seeing…’ trope into the title of a graduate seminar, ‘Seeing Geographically’, which as is noted in the preface was an important jumping off point for the book. The subtitle of Scott’s book is also pretty great: How Certain Schemes to Improve the Human Condition Have Failed. I wouldn’t go so far as to declare GIS ‘failed’, but I do think that as a platform it works hard to make us see the world in particular ways, and that we would do better to take a step back and allow ourselves to think (and see) geographically using computers in a wider variety of ways.\nWhich brings me to…"
  },
  {
    "objectID": "other-stuff/thinking-geographically.html#tools-to-think-with",
    "href": "other-stuff/thinking-geographically.html#tools-to-think-with",
    "title": "Thinking geographically",
    "section": "Tools to think with",
    "text": "Tools to think with\nThis one is only a title, and a misremembered one at that. The title of Waddington’s book was Tools for Thought3, which I’ve never actually read, but reading this blog post, I probably should: it sounds great! I also note from its table of contents an early section entitled ‘Things and Processes’ (again, see my Chapter 8).\nFor present purposes, more important than the content of Waddington’s book is my misremembrance of its title, which lodged in my brain as ‘tools to think with’. That’s a sufficiently generic phrase that I might also have encountered it somewhere else. Anyway… for me it’s how I’ve come to think about computers: as tools to think with. The whole tool/theory/thought thing doesn’t need rehearsing here. It is central to one of the more depressing exchanges about GIS in all of the geography literature,4 which seems in retrospect to have closed down the early 90s rapprochment between ‘GISers’ and geography more widely, as Dawn Wright, Mike Goodchild, and Jim Proctor’s well-intentioned attempt to open up a conversation about GIS as ‘tool or science?’ was treated rather dismissively by John Pickles.5\nAnyway, ‘tools to think with’ is central to my argument that the geographical representations we adopt when the computer we turn to is a GIS are limiting and potentially unhelpful. When we ‘do GIS’ we take up those representations unthinkingly, and the computer has already done a a lot of the important thinking for us. So, for example, When we emphasise to students the importance of transforming all the data layers in a project into the same coordinate reference system, we’ve already assumed away many of the most interesting geographical questions we might ask!\nWhat then would it mean to instead think geographically with computers?"
  },
  {
    "objectID": "other-stuff/thinking-geographically.html#from-thinking-geographically-to-computing-geographically",
    "href": "other-stuff/thinking-geographically.html#from-thinking-geographically-to-computing-geographically",
    "title": "Thinking geographically",
    "section": "From thinking geographically to Computing Geographically",
    "text": "From thinking geographically to Computing Geographically\nThis is where Peter Jackson’s short paper ‘Thinking geographically’6 came in. My bibliographic database tells me I downloaded it in August 2013, which checks out. I was thinking then about what an ‘intro GIS/geospatial’ class ought to look like on a campus (Berkeley) where excellent courses already occupied that space as part of a GIS minor.\nI came to two conclusions. First, such a class in 2013 (and a decade on the point is even clearer) should not be about GIS at all, but about web-based ‘geospatial stuff’.7 Second, it seemed to me then—and still does now—that such a course should start from how geographers think about the world, and how those ideas manifest (or perhaps don’t) in geospatial tools. This could provide a basis for more thoughtful approaches to ‘doing GIS’ (see Chapter 9).\nFrom the idea of an intro geospatial course centred around geographical thinking it’s a very short internet search to Jackson’s ‘Thinking geographically’. Crucially (for the course and for the book) he asks\n\nBut what concepts and theories would you choose as constituting the heart of our subject, contributing uniquely to our understanding of the world? (page 199)\n\nJackson’s answer is a lot shorter than mine, but then his paper is 6 pages and the book is 300! The course that I developed ‘Digital Worlds’,8 also covers less ground than the book, although if I were still teaching it, I’d most certainly use the book for readings. For the record, Jackson’s key concepts (three of them pairs) are space and place, scale and connection, proximity and distance, and relational thinking. On reflection, it’s a little odd that ‘distance’ per se didn’t make it into Computing Geographically, but all the others are represented, and of course distance and proximity are implied.\nNeedless to say, arriving at the final list of concepts covered in the book was an iterative process. Space, place and scale were clearly never not going to make the cut. Some other concepts came and went, depending on how accessible, generalisable, and widely deployed they seem to me to be. The extent to which they have been, or could potentially be engaged in giscience, was also important as a book attempting to ‘bridge’ giscience and geography needs both sides to come to the party for the coverage to be useful and meaningful."
  },
  {
    "objectID": "other-stuff/thinking-geographically.html#memory-and-forgetting",
    "href": "other-stuff/thinking-geographically.html#memory-and-forgetting",
    "title": "Thinking geographically",
    "section": "Memory and forgetting",
    "text": "Memory and forgetting\nI’m disturbed to realise that I failed to mention ‘Thinking geographically’ anywhere in Computing Geographically. I hope it’s clear there is a whole lot more to my book than a response to Peter Jackson’s well-posed question quoted above. While books emerge in their writing, the writing itself isn’t where they begin. There is a pre-history of thought and ideas before any words are committed to the computer screen. ‘Thinking geographically’, along with Seeing Like a State, and the non-existent Tools to Think With (I’d read that book!), are part of the pre-history of _Computing Geographically, which I am pleased to be able to acknowledge here.\nThis rather meandering post gives some sense (I hope) of how books happen—at least for me. After all, if the path from the general idea to the finished article was more linear, it wouldn’t be as hard, nor take as long, to write them (see also Rosa, support cat)."
  },
  {
    "objectID": "other-stuff/thinking-geographically.html#footnotes",
    "href": "other-stuff/thinking-geographically.html#footnotes",
    "title": "Thinking geographically",
    "section": "References",
    "text": "References\n\n\nScott JC. 1998. Seeing Like a State: How Certain Schemes to Improve the Human Condition Have Failed. New Haven CT, Yale University Press.↩︎\nAn entertaining read on the related socialist calculation debate is Francis Spufford’s Red Plenty. See also this.↩︎\nWaddington CH. 1977. Tools for Thought: How to Understand and Apply the Latest Scientific Techniques of Problem Solving. New York: Basic Books.↩︎\nSee (and read in chronological order):\n\nWright DJ, MF Goodchild and JD Proctor. 1997. Demystifying the persistent ambiguity of GIS as tool’ versusscience’. Annals of the Association of American Geographers 87(2) 346–362.\nPickles J. 1997. Tool or science? GIS, technoscience and the theoretical turn. Annals of the Association of American Geographers 87(2) 363–372.\nWright DJ, MF Goodchild and JD Proctor. 1997. Reply: still hoping to turn that theoretical corner. Annals of the Association of American Geographers 87(2) 373.\n\n↩︎\nFor good or ill the exchange has also bequeathed us the ‘doing GIS’ phrasing, which I found useful in framing aspects of the book, although I dislike the division between ‘doing’ and ‘thinking’ that the phrase often seems to imply.↩︎\nJackson P. 2006. Thinking geographically. Geography 91(3) 199–204.↩︎\nFor an official endorsement of that technical term, see Goodchild MF. 2015. Four thoughts on the future of GIS. ArcWatch (Feb).↩︎\nSee southosullivan.com/geog80/.↩︎"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Odds and ends",
    "section": "",
    "text": "This section is a collection of ‘bonus material’ reflecting on aspects of the book, and ongoing concerns, which don’t really fall under a single chapter.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are no silly questions\n\n\nWell… maybe there are some\n\n\n\nextras\n\n\nquestions\n\n\n\nSome ideas for discussion prompts if you are using the book in a seminar or class… or even if you’re not\n\n\n\n\n\nJun 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThinking geographically\n\n\nWhere ideas come from\n\n\n\nextras\n\n\n\nI just remembered some important sources of inspiration for the book and wanted to acknowledge them\n\n\n\n\n\nJan 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nRosa, support cat\n\n\nBecause: internet\n\n\n\nextras\n\n\n\nWriting is hard\n\n\n\n\n\nOct 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nGiscience? not GIScience?!\n\n\nJust don’t anyone say geospatial\n\n\n\nextras\n\n\n\nThoughts on the terms giscience, GIScience, and geographic(al) information science. Also: GISer\n\n\n\n\n\nOct 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nAbout the cover\n\n\nAnd how to make your own\n\n\n\nextras\n\n\ncode\n\n\nR\n\n\n\nAn explanation of how the I made the cover art\n\n\n\n\n\nOct 19, 2023\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap8/fig8-03-game-of-life.html",
    "href": "chapters/chap8/fig8-03-game-of-life.html",
    "title": "Figure 8.3 The game of life CA",
    "section": "",
    "text": "The example in the book was made using a NetLogo model based on this model from Spatial Simulation, but this page provides R code instead.\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(gsignal)\nlibrary(pracma)\nlibrary(data.table)\nlibrary(ggplot2)\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap8/fig8-03-game-of-life.html#model-code",
    "href": "chapters/chap8/fig8-03-game-of-life.html#model-code",
    "title": "Figure 8.3 The game of life CA",
    "section": "Model code",
    "text": "Model code\nThe model code is in the cell below. It returns a 3D array of cell states, with each ‘layer’ a new 2D array of cell states.\n\n\nCode\n# random neighbour offset\nk &lt;- matrix(c(1, 1, 1,\n              1, 0, 1,\n              1, 1, 1), 3, 3)\n\nwrap_matrix &lt;- function(m) {\n  nr &lt;- nrow(m)\n  nc &lt;- ncol(m)\n  m2 &lt;- pracma::repmat(m, 3, 3)\n  m2[0:(nr + 1) + nr, 0:(nc + 1) + nc]\n}\n\ngeneration &lt;- function(m) {\n  nr &lt;- nrow(m)\n  nc &lt;- ncol(m)\n  live &lt;- wconv(\"2d\", wrap_matrix(m), k, \"same\")[1:nr + 1, 1:nc + 1]\n  next_m &lt;- zeros(nr, nc)\n  next_m[which(m == 1 & live %in% 2:3 | m == 0 & live == 3)] &lt;- 1\n  next_m\n}\n\ninit_state &lt;- function(density = 0.35, nr, nc) {\n  matrix(as.numeric(runif(nr * nc) &lt; density),\n         ncol = nc, nrow = nr)\n}\n\nlife &lt;- function(nc = 20, nr = 20, tmax = 20, \n                 density = 0.35, seed = NULL) {\n  set.seed(seed)\n  result &lt;- array(0, dim = c(nr, nc, tmax))\n  result[, , 1] &lt;- init_state(density = density, \n                              nr = nr, nc = nc)\n  for (gen in 2:tmax) {\n    result[, , gen] &lt;- generation(result[, , gen - 1])\n  }\n  result\n}"
  },
  {
    "objectID": "chapters/chap8/fig8-03-game-of-life.html#run-the-model",
    "href": "chapters/chap8/fig8-03-game-of-life.html#run-the-model",
    "title": "Figure 8.3 The game of life CA",
    "section": "Run the model",
    "text": "Run the model\nWe run the model and convert it into a dataframe to make it easier to plot.\n\n\nCode\ninitial_density &lt;- 0.35\nwidth &lt;- 50\nheight &lt;- 50\ntime_steps &lt;- 200\n\nlife_df &lt;- life(nr = height, nc = width, tmax = time_steps, \n                density = initial_density) |&gt;\n  as.data.table() |&gt;\n  as_tibble() |&gt;\n  rename(x = V1, y = V2, t = V3, num = value)"
  },
  {
    "objectID": "chapters/chap8/fig8-03-game-of-life.html#plotting",
    "href": "chapters/chap8/fig8-03-game-of-life.html#plotting",
    "title": "Figure 8.3 The game of life CA",
    "section": "Plotting",
    "text": "Plotting\nThe dataframe has attributes x, y, t, and state, which are most easily plotted as a sequence of model snapshots using ggplot2::facet_wrap.\n\n\nCode\nggplot(life_df |&gt; dplyr::filter(t &gt;= 30, t &lt;= 49)) + \n  geom_raster(aes(x = x, y = y, fill = num), show.legend = FALSE) + \n  coord_equal() +\n  facet_wrap( ~ t, ncol = 5) +\n  theme_void() + \n  theme(strip.background = element_blank(),\n        strip.text.x = element_blank())\n\n\n\n\n\n\n\n\n\n\nAn animation\nWe can also make a movie…\n\n\nCode\nlibrary(gganimate)\n\nanim &lt;- ggplot(life_df) + \n  geom_raster(aes(x = x, y = y, fill = num), show.legend = FALSE) + \n  coord_equal() +\n  transition_manual(t) + \n  labs(title = \"Step: {frame}\") +\n  theme_void()\n        \nanim &lt;- animate(anim, nframes = 100, fps = 5)\nanim_save(\"life.gif\", anim)\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap8/index.html",
    "href": "chapters/chap8/index.html",
    "title": "Chapter 8",
    "section": "",
    "text": "I’ve been interested in pattern and process for a long time. In this book, I approach them the other way around, starting with process, recognising that if the world really is anything, it’s processes all the way down, not things at all. This involves engaging some process philosophy, which is a wild ride! Recognising pattern offers us a way into that world.\nComplexity science may be one way for giscience to grapple with these ontological challenges, and it (i.e. complexity science) is where I started my geographical journey, and what drew me into the PhD program at UCL’s CASA to work with Mike Batty. So, while this is the last major chapter in the book, it’s likely the one where the themes will be most familiar to anyone who has read any of my earlier work!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks for Chapter 8\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigures 8.1 and 8.2 One-dimensional CA\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8.3 The game of life CA\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8.4 A voter model CA\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion questions\n\n\n\nquestions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap8/fig8-01-1d-ca.html",
    "href": "chapters/chap8/fig8-01-1d-ca.html",
    "title": "Figures 8.1 and 8.2 One-dimensional CA",
    "section": "",
    "text": "Again, the examples in the book were made using a NetLogo model based on this one in the NetLogo model library. This page provides R code instead.\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap8/fig8-01-1d-ca.html#model-code",
    "href": "chapters/chap8/fig8-01-1d-ca.html#model-code",
    "title": "Figures 8.1 and 8.2 One-dimensional CA",
    "section": "Model code",
    "text": "Model code\nThe 1D elementary CA model code is in the block below. It returns a matrix of cell states, with each system state a row in the matrix.\nThe key function is one_d_ca(rule, n, density, t), which returns a t \\(\\times\\) n matrix, with initial density of 1’s given by the density parameter, and the update rule being the Wolfram code specified by rule.\n\n\nCode\nlibrary(dplyr)\n\n# initialise random state, specified size and density\ninit_state &lt;- function(n = 50, density = 0.5) {\n  as.numeric(runif(n) &lt; density)\n}\n\n# pre- and post-fix the last and first elements of the state\nwrap_state &lt;- function(x) {\n  c(tail(x, 1), x, x[1])\n}\n\n# binary vector to decimal integer (most significant bits first)\nas_decimal &lt;- function(b) {\n  sum((2 ^ ((length(b) - 1):0)) * b)\n}\n\n# convert decimal integer to vector of bits (most significant first)\nas_binary &lt;- function(n, n_bits = 8) {\n  result &lt;- c()\n  for (i in 1:n_bits) {\n    result &lt;- c(n %% 2, result)\n    n &lt;- n %/% 2\n  }\n  result\n}\n\nrule_description &lt;- function(rule_num) {\n  paste(rule_num, \n        paste(as_binary(rule_num), collapse = \"\"), \n        sep = \": \")\n}\n\n# takes a matrix of CA states (each row a timestep) and appends\n# a new row for the next system state\ngeneration &lt;- function(states, rule) {\n  state &lt;- tail(states, 1) |&gt; c()\n  w_state &lt;- wrap_state(state)\n  result &lt;- c()\n  for (i in 1:length(state)) {\n    nbhd &lt;- w_state[seq(i, i + 2)]\n    result &lt;- c(result, rule[as_decimal(nbhd) + 1])\n  }\n  matrix(c(states |&gt; t() |&gt; c(), result), nc = ncol(states), byrow = TRUE)\n}\n\n# generate a matrix of cell states where each row is the system state\none_d_ca &lt;- function(rule = 30, n = 64, density = 0.5, t = 192) {\n  s &lt;- init_state(n, density)\n  ss &lt;- matrix(s, nr = 1)\n  for (i in 2:t) {\n    ss &lt;- generation(ss, rev(as_binary(rule)))\n  }\n  ss\n}"
  },
  {
    "objectID": "chapters/chap8/fig8-01-1d-ca.html#making-plots",
    "href": "chapters/chap8/fig8-01-1d-ca.html#making-plots",
    "title": "Figures 8.1 and 8.2 One-dimensional CA",
    "section": "Making plots",
    "text": "Making plots\n\nFigure 8.2\nThe second figure is a little easier since there is only one of them…\nThe matrix format is convenient for computation, and fine for plotting a single model result but that has to be converted to a dataframe to be plotted using ggplot2. So here is the pure R version of Figure 8.2, but with time running from top to bottom, more cells, and more time.\n\n\nCode\nlibrary(ggplot2)\nlibrary(reshape2)\n\none_d_ca(rule = 110, n = 192, density = 0.5, t = 384) |&gt;\n  reshape2::melt(c(\"t\", \"x\"), value.name = \"state\") |&gt;\n  mutate(state = as.logical(state)) |&gt;\n  ggplot() +\n    geom_raster(aes(x = x, y = -t, fill = state)) + \n    scale_fill_brewer(palette = \"Paired\") +\n    coord_equal() +\n    theme_void()\n\n\n\n\n\n\n\n\n\n\n\nFigure 8.1\nAnd here are the results for all Wolfram’s elementary 1D CA.\n\n\nCode\n# convenience function to return a dataframe instead of a matrix\nget_df &lt;- function(rule, n = 64, density = 0.5, t = 192) {\n  one_d_ca(rule = rule, n = n, density = density, t = t) |&gt;\n  reshape2::melt(c(\"t\", \"x\"), value.name = \"state\") |&gt;\n  mutate(state = as.logical(state),\n         rule = rule)\n}\n\n# The 32 rules that match Wolfram's selection criteria\nrules &lt;- c(  0,   4,  18,  22,  32,  36,  50,  54,\n            72,  76,  90,  94, 104, 108, 122, 126,\n           128, 132, 146, 150, 160, 164, 178, 182,\n           200, 204, 218, 222, 232, 236, 250, 254)\n\ndf &lt;- get_df(rules[1], t = 128)\n\nfor (rule in rules[2:32]) {\n  df &lt;- bind_rows(df, get_df(rule, t = 128))\n}\n\n# give the rules a better label\ndf$rule &lt;- factor(df$rule, levels = rules,\n                  labels = lapply(rules, rule_description))\n\nggplot(df) +\n  geom_raster(aes(x = t, y = x, fill = state)) + \n  scale_fill_brewer(palette = \"Paired\") +\n  coord_equal() +\n  guides(fill = \"none\") +\n  facet_wrap( ~ rule, ncol = 4) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap1/links-1.html",
    "href": "chapters/chap1/links-1.html",
    "title": "Links for Chapter 1",
    "section": "",
    "text": "Footnote 6\nYou’ll find my PhD thesis here: Graph-based Cellular Automaton Models of Urban Spatial Processes. Chapter 2 is the slightly embarrassing take on space, mentioned in the note.\n\n\nFootnote 8\nSlides from the course I developed at Berkeley and taught from 2014 to 2018 Geog 80 Digital Worlds: An Introduction to Geospatial Technologies\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap1/questions-1.html",
    "href": "chapters/chap1/questions-1.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by Ch Mahesware Raju used under a Creative Commons Attribution-Share Alike 4.0 International license\n\n\nSome of these might be more easily considered when you have read the whole book, or at least a bit more of it than the first chapter. See also the overall questions page.\n\nIs the premise of the book correct?\nIn other words: are geography and giscience really as estranged as I suggest?\n\nWhat about critical GIS? Isn’t it already doing this work?\nAm I too harsh in my assessment of the limitations of critical GIS?\n\nThe big question (at least for me):\nHow have giscience and geography come to be so separate?\nI mention in the preamble (page 2) that\n\nI originally planned for this opening chapter to be a historical account of the relationship between giscience and geography. It would open on a couple of my intellectual heroes from early in geography’s quantitative revolution, showing how their work was deeply engaged with geography, and contrast that with how distanced from geography giscience and GIS have become. Then, somehow or other I was going to explain how this distance had grown.\n\nWhat happened? Do any of the capsule explanations that follow this quote seem more plausible than the others? I know, this is an unfair question: I ducked answering it completely. But that just makes it all the more worth thinking about.\n\nAnd finally, a silly question:\nWho were those two intellectual heroes I chickened out of writing up?!\nNo clues.\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/fig6-05-6-06-world-cities-network.html",
    "href": "chapters/chap6/fig6-05-6-06-world-cities-network.html",
    "title": "Figures 6.5 and 6.6 Reduced world city network viewed various ways",
    "section": "",
    "text": "This page includes python code derived from the code that was used to generate these figures. Again, you will see just how troublesome the limitations of existing platforms in handling projections intelligently can be. Some of the code is a bit overwhelming, so I’ve hidden most of it by default, but you can see it by clicking ► Code to view the code blocks.\nCode\nimport math\nimport pandas\nimport numpy\nimport networkx\nimport geopandas\nfrom shapely.geometry import LineString\nfrom shapely.geometry import MultiLineString\nfrom shapely.geometry import Point\nfrom shapely.geometry import MultiPoint\nfrom shapely.geometry import Polygon\n\n%matplotlib inline \nimport matplotlib.pyplot as plt\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/fig6-05-6-06-world-cities-network.html#the-base-data",
    "href": "chapters/chap6/fig6-05-6-06-world-cities-network.html#the-base-data",
    "title": "Figures 6.5 and 6.6 Reduced world city network viewed various ways",
    "section": "The base data",
    "text": "The base data\nThis is dataset 11 from the site linked here and shows the numbers of offices of 100 major firms that exist in a collection of 315 cities. The network we build is based on shared offices of firms, i.e. if two cities both have offices of the same firm, then we consider them related. To avoid a very dense network, we require the presence of a firm in a city to have been rated at least 4 (on a 5 point scale) in the dataset.\nFirst we read the data and have a look at it.\n\n\nCode\nwcn = pandas.read_csv(\"da11-1.csv\", index_col = 0)\nwcn.head(5)\n\n\n\n\n\n\n\n\n\nErnst & Young\nArthur Andersen\nMSI\nIGAF\nAGN\nBDO\nGrant Thornton\nHorwath\nKPMG\nSummit & Baker\n...\nMercer\nBoston\nDeloitte\nBoozeA&M\nA.T. Kearney\nMcKinsey\nBain\nCompass\nAndersen Consulting\nGemini\n\n\nname\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABERDEEN\n2\n0\n0\n0\n0\n0\n0\n2\n2\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nABIJAN\n3\n0\n0\n0\n0\n0\n0\n0\n2\n0\n...\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n\n\nABU DHABI\n2\n2\n0\n0\n2\n0\n0\n2\n2\n0\n...\n0\n0\n2\n2\n0\n0\n0\n0\n2\n0\n\n\nACCRA\n0\n0\n0\n0\n0\n0\n2\n0\n2\n0\n...\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n\n\nADDIS ABABA\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n5 rows × 100 columns\n\n\n\n\nMaking the data into a network\nThe two functions in the code block below enable us to apply the ‘minimum score 4’ filter to the raw data, and then using matrix multiplication to convert the table into the adjacency matrix of a graph. This is based on the idea that an incidence matrix, \\(\\mathbf{B}\\), which the table is, can be multiplied by its transpose to yield an adjacency matrix, \\(\\mathbf{A}\\):\n\\[\\mathbf{A}=\\mathbf{B}\\mathbf{B}^{\\mathrm{T}}\\]\n\n\nCode\ndef cut_table_at(table: pandas.DataFrame, x: int) -&gt; pandas.DataFrame:\n    tbl = table.copy()\n    tbl[tbl[:] &lt; x] = 0  # remove cases &lt; x\n    tbl[tbl[:] &gt; 0] = 1  # set all remaining to 1\n    return tbl[list(tbl.sum(axis = 1) &gt; 0)]  # remove rows with no non-0 values\n\ndef make_network_from_incidence_table(tbl: pandas.DataFrame) -&gt; networkx.Graph:\n    incidence_matrix = numpy.array(tbl)\n    adj_matrix = incidence_matrix.dot(incidence_matrix.transpose())\n    numpy.fill_diagonal(adj_matrix, 0)\n    G = networkx.Graph(adj_matrix)\n    return networkx.relabel_nodes(G, dict(zip(G.nodes(), list(tbl.index))))"
  },
  {
    "objectID": "chapters/chap6/fig6-05-6-06-world-cities-network.html#the-geography",
    "href": "chapters/chap6/fig6-05-6-06-world-cities-network.html#the-geography",
    "title": "Figures 6.5 and 6.6 Reduced world city network viewed various ways",
    "section": "The geography",
    "text": "The geography\nBelow, we use the previous functions to form the graph, and then add longitude-latitude coordinates for each city to the nodes.\n\n\nCode\nGnx = make_network_from_incidence_table(cut_table_at(wcn, 4))\n\nwcn_ll = pandas.read_csv(\"wcn-cities-ll.csv\", index_col=0)\n\nfor name in Gnx.nodes():\n    lon = wcn_ll.loc[name][\"LONGITUDE\"]\n    lat = wcn_ll.loc[name][\"LATITUDE\"]\n    Gnx.nodes[name][\"lat\"] = lat\n    Gnx.nodes[name][\"lon\"] = lon\n\n\n\nA bad map\nAt this point, we can make up a naïve map (i.e. Figure 6.5a), simply connecting the end point coordinates of each edge in the graph with straight lines.\n\n\nCode\ncity_to_city = []\nfor e in Gnx.edges():\n    p1 = Point(Gnx.nodes[e[0]][\"lon\"], Gnx.nodes[e[0]][\"lat\"])\n    p2 = Point(Gnx.nodes[e[1]][\"lon\"], Gnx.nodes[e[1]][\"lat\"])\n    city_to_city.append(LineString([p1, p2]))\n\n# make up the naive links linestring dataset\ncity_to_city_gdf = geopandas.GeoDataFrame(\n  geometry = geopandas.GeoSeries(city_to_city))\ncity_to_city_gdf.crs = \"+proj=longlat\"\n\nmoll = \"+proj=moll\"\n# make up a 'globe' polygon for the background to the world maps\nglobe = Polygon(\n  [Point(-180, y) for y in [_ / 10 for _ in range(-900, 901)]] + \\\n  [Point( 180, y) for y in [_ / 10 for _ in range(900, -901, -1)]])\nglobe_gdf = geopandas.GeoDataFrame(geometry = geopandas.GeoSeries([globe]))\nglobe_gdf.crs = \"+proj=longlat\"\n\n# get countries data\ncountries = geopandas.read_file(\"ne-world.gpkg\")\n\n# and make up a map\nax = globe_gdf.to_crs(moll).plot(fc = \"#dddddd\")\ncountries.to_crs(moll).plot(ax = ax, fc = \"w\", linewidth = 0)\ncity_to_city_gdf.to_crs(moll).plot(ax = ax, color = \"k\", \n                                   alpha = 0.5, linewidth = 0.25)\nplt.axis(\"off\")\n\n\n(-19844105.265762024,\n 19844105.265762024,\n -9922052.632687533,\n 9922052.632687533)\n\n\n\n\n\n\n\n\n\n\n\nThe world is not flat\nThat map is not very useful, although avoiding making this kind of nonsense map is surprisingly difficult—another consequence of the limitations of how projections are handled in contemporary platforms. Things get complicated though… you have been warned…\nSo, we need several functions. First, the great circle distance beween two longitude-latitude points.\n\n\nCode\n# Uses the Haversine formulae, see\n# https://en.wikipedia.org/wiki/Haversine_formula\ndef get_great_circle_distance(p1: Point, p2: Point,\n                              R: float = 6378.137) -&gt; float:\n    lon0 = math.radians(p1.x)\n    lat0 = math.radians(p1.y)\n    lon1 = math.radians(p2.x)\n    lat1 = math.radians(p2.y)\n    dlon = lon1 - lon0\n    dlat = lat1 - lat0\n    a = math.sin(dlat / 2) * math.sin(dlat / 2) + \\\n        math.cos(lat0) * math.cos(lat1) * \\\n        math.sin(dlon / 2) * math.sin(dlon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return (R * c)\n\n\nNext, a function to return a great circle line (geodesic) between two points.\n\n\nCode\ndef interpolate_between(z1: float, z2: float, steps: int) -&gt; list[float]:\n    fractions = [(1 + x) / steps for x in range(steps - 1)]\n    return [z1] + [(z2 - z1) * f for f in fractions] + [z2]\n\ndef get_geodesic(p1: Point, p2: Point, step_length: int = 10) -&gt; LineString:\n    dist = get_great_circle_distance(p1, p2)\n    # determine number of steps\n    n_steps = math.ceil(dist / step_length) \n    # reproject in a space where great circles are straight lines\n    gdf = geopandas.GeoDataFrame(geometry = geopandas.GeoSeries([p1, p2]))\n    gdf.crs = \"+proj=longlat\"\n    gdf = gdf.to_crs(f\"+proj=aeqd +lon_0={p1.x} +lat_0={p1.y}\")\n    np1x, np1y = gdf.geometry[0].x, gdf.geometry[0].y\n    np2x, np2y = gdf.geometry[1].x, gdf.geometry[1].y\n    xs = interpolate_between(np1x, np2x, n_steps)\n    ys = interpolate_between(np1y, np2y, n_steps)\n    ngdf = geopandas.GeoDataFrame(geometry = geopandas.GeoSeries(\n        Point(x, y) for x, y in zip(xs, ys)))\n    ngdf.crs = f\"+proj=aeqd +lon_0={p1.x} +lat_0={p1.y}\"\n    points = list(ngdf.to_crs(\"+proj=longlat\").geometry)\n    return LineString((p.x, p.y) for p in points) \n\n\nNext, a function that takes geodesic and breaks it at any point where there is large apparent jump between consecutive points. Here we use the naïve distance measurement based on the coordinates. This will mean the line is broken at the antimeridian.\n\n\nCode\ndef split_at_antimeridian(geodesic: LineString) -&gt; \\\n        MultiLineString|MultiPoint|LineString:\n    points = geodesic.coords\n    # make into a series of LineStrings\n    segments = [LineString([p1, p2]) \n                   for p1, p2 in zip(points[:-1], points[1:])]\n    lengths = [ls.length for ls in segments]\n    intersections = [l &gt; 1 for l in lengths]\n    if True in intersections:\n        idx = intersections.index(True)\n        coords1 = points[:idx]\n        coords2 = points[idx+1:]\n        if len(coords1) &gt; 1 and len(coords2) &gt; 1:\n            return MultiLineString([coords1, coords2])\n        elif len(coords1) == 1 and len(coords2) == 1:\n            return MultiPoint(points)\n        else:\n            if len(coords1) &gt; len(coords2):\n                return LineString(coords1)\n            else:\n                return LineString(coords2)\n    else:\n        return LineString(points)\n\n\n\n\nMake geodesic datasets between the cities\n\n\nCode\ngeodesics = [] # list of LineStrings along the geodesic\ncut_geodesics = [] # list of the geodesics cut at the dateline\n\n# iterate over the edges\nfor e in Gnx.edges():\n  p1 = Point(Gnx.nodes[e[0]][\"lon\"], Gnx.nodes[e[0]][\"lat\"])\n  p2 = Point(Gnx.nodes[e[1]][\"lon\"], Gnx.nodes[e[1]][\"lat\"])\n  g = get_geodesic(p1, p2)\n  geodesics.append(g)\n  cut_geodesics.append(split_at_antimeridian(g))\n\ngeodesics_gdf = geopandas.GeoDataFrame(\n  geometry = geopandas.GeoSeries(geodesics))\ngeodesics_gdf.crs = \"+proj=longlat\"\n\ngeodesics_cut_gdf = geopandas.GeoDataFrame(\n  geometry = geopandas.GeoSeries(cut_geodesics))\ngeodesics_cut_gdf.crs = \"+proj=longlat\""
  },
  {
    "objectID": "chapters/chap6/fig6-05-6-06-world-cities-network.html#better-mollweide-maps",
    "href": "chapters/chap6/fig6-05-6-06-world-cities-network.html#better-mollweide-maps",
    "title": "Figures 6.5 and 6.6 Reduced world city network viewed various ways",
    "section": "Better Mollweide maps",
    "text": "Better Mollweide maps\nThe first of these doesn’t quite work, because it doesn’t break the great circle links at the anti-meridian (dateline) so we get ‘parallels’ from one side of the map to the other when one crosses the anti-meridian. The second uses the geodesics that have been broken at the anti-meridian, so is ‘correct’.\n\n\nCode\nax = globe_gdf.to_crs(moll).plot(fc = \"#dddddd\")\ncountries.to_crs(moll).plot(ax = ax, fc = \"w\", linewidth = 0)\ngeodesics_gdf.to_crs(moll).plot(ax = ax, color = \"k\", \n                                alpha = 0.5, linewidth = 0.25)\nplt.axis(\"off\")\n\nax = globe_gdf.to_crs(moll).plot(fc = \"#dddddd\")\ncountries.to_crs(moll).plot(ax = ax, fc = \"w\", linewidth = 0)\ngeodesics_cut_gdf.to_crs(moll).plot(ax = ax, color = \"k\", \n                                    alpha = 0.5, linewidth = 0.25)\nplt.axis(\"off\")\n\n\n(-19844105.265762024,\n 19844105.265762024,\n -9922052.632687533,\n 9922052.632687533)"
  },
  {
    "objectID": "chapters/chap6/fig6-05-6-06-world-cities-network.html#orthographic-not-so-fail-maps",
    "href": "chapters/chap6/fig6-05-6-06-world-cities-network.html#orthographic-not-so-fail-maps",
    "title": "Figures 6.5 and 6.6 Reduced world city network viewed various ways",
    "section": "Orthographic not so fail maps",
    "text": "Orthographic not so fail maps\n\n\nCode\natlantic = \"+proj=ortho +lon_0=0 +lat_0=0\"\npacific = \"+proj=ortho +lon_0=180 +lat_0=0\"\nhalf_globe = globe_gdf.copy()\nhalf_globe.geometry = half_globe.geometry.scale(xfact = 0.5)\n\ncountries_a = geopandas.read_file(\"atlantic.gpkg\").to_crs(atlantic)\ncountries_p = geopandas.read_file(\"pacific.gpkg\").to_crs(pacific)\n\nax = half_globe.to_crs(atlantic).plot(fc = \"#dddddd\")\ncountries_a.to_crs(atlantic).plot(ax = ax, fc = \"w\", linewidth = 0)\ngeodesics_cut_gdf.to_crs(atlantic).plot(ax = ax, color = \"k\",\n                                        alpha = 0.5, linewidth = 0.25)\nplt.axis(\"off\")\n\nax = half_globe.to_crs(pacific).plot(fc = \"#dddddd\")\ncountries_p.to_crs(pacific).plot(ax = ax, fc = \"w\", linewidth = 0)\ngeodesics_cut_gdf.to_crs(pacific).plot(ax = ax, color = \"k\", \n                                       alpha = 0.5, linewidth = 0.25)\nplt.axis(\"off\")"
  },
  {
    "objectID": "chapters/chap6/fig6-10-small-world-1d.html",
    "href": "chapters/chap6/fig6-10-small-world-1d.html",
    "title": "Figure 6.10 The small world rewiring process",
    "section": "",
    "text": "The figure in the book shows only three rewiring steps for the sake of space. Here we show 11 with increasing probability of rewiring at each step of 0.05.\n\n\nCode\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tmap)\nlibrary(igraph)\n\nplot_graph &lt;- function(G, main='', vertex.color='black') {\n  plot(G, main = main,\n       layout = layout.circle(G), \n       vertex.label = NA, vertex.color = vertex.color, vertex.size = 5, \n       vertex.shape = 'circle', vertex.lwd = 0, \n       edge.color = 'black', edge.width = 0.5)\n}\n\npar(mar = rep(1, 4))\nlayout(matrix(1:12, nrow = 3, byrow = TRUE))\n\nthe_graph &lt;- make_lattice(50, dim = 1, circular = TRUE)\nplot_graph(the_graph)\n\nfor (i in 1:11) {\n  the_graph &lt;- rewire(the_graph, each_edge(0.05))\n  plot_graph(the_graph)\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/fig6-07-world-trade-colour.html",
    "href": "chapters/chap6/fig6-07-world-trade-colour.html",
    "title": "Figure 6.7 World trade network communities",
    "section": "",
    "text": "Here is a colour version of this figure, which is a lot easier to make sense of than the black and white version in print.\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/index.html",
    "href": "chapters/chap6/index.html",
    "title": "Chapter 6",
    "section": "",
    "text": "In this chapter the focus is squarely on networks (which mathematicians confusingly insist on calling graphs) and their potential for more relational understandings of space in giscience. As much of the code associated with the figures in this chapter shows, handling such structure elegantly is not something existing geospatial tools do well.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks for Chapter 6\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigures 6.5 and 6.6 Reduced world city network viewed various ways\n\n\n\nfigures\n\n\ncode\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.7 World trade network communities\n\n\n\nfigures\n\n\nextras\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.10 The small world rewiring process\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.11 The small world rewiring process in two dimensions\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.12 A simple graph drawn nine different ways\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.14 Relative time map of the Santa Barbara street network\n\n\n\nfigures\n\n\ncode\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion questions\n\n\n\nquestions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap7/fig7-06-tg-beijing-taxis.html",
    "href": "chapters/chap7/fig7-06-tg-beijing-taxis.html",
    "title": "Figure 7.6 Space-time paths for 100 Beijing taxis",
    "section": "",
    "text": "Taking advantage of the web format, here I show an interactive version of this figure.\n\n\nCode\nlibrary(dplyr)\nlibrary(timeDate)\nlibrary(gg3D)\nlibrary(plotly)\n\n\nWe filter the data so they are all within 0.25 decimal degrees of the mean location of all points (I know, I know… decimal degrees are terrible, but the point here is the time dimension, not the geographical coordinates).\n\n\nCode\ntaxis &lt;- read.table('taxis100.txt', sep=',') |&gt;\n  rename(id = V1, t = V2, lon = V3, lat = V4)\n\nlon.mean &lt;- mean(taxis$lon)\nlat.mean &lt;- mean(taxis$lat)\n\ntaxis.bj &lt;- taxis |&gt;\n  mutate(time = as.double(timeDate(t))) |&gt;\n  filter(abs(lon - lon.mean) &lt; .25,\n         abs(lat - lat.mean) &lt; .25)\n\n\nplotly makes a nice interactive plot, without too much fuss.\n\n\nCode\nplot_ly(group_by(taxis.bj, id), \n        x = ~lat, y = ~lon, z = ~t, color = ~id, \n        type = 'scatter3d', mode = 'lines', asp = 1, lwd = 0.5)\n\n\n\n\n\n\nAnd more like the plot in the book, here is a static 2.5D version, using gg3d::stat_3D.\n\n\nCode\nggplot(taxis.bj, aes(x = lon, y = lat, z = time, group = id, color = id)) +\n  stat_3D(theta = 30, phi = 5, geom = \"path\", \n          alpha = 0.25, linewidth = 0.35) +\n  scale_color_viridis_c() +\n  axes_3D(theta = 30, phi = 5) +\n  coord_equal() +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap7/fig7-07-tg-flockers.html",
    "href": "chapters/chap7/fig7-07-tg-flockers.html",
    "title": "Figure 7.7 Coordination in space-time paths",
    "section": "",
    "text": "This page shows a different set of ‘flockers’ converging in space-time—in fact the same ones that are used on the ‘make your own cover’ page. I’ve provided two plots here, both in colour, and one an interactive 3D plot so you can have a proper look.\n\n\nCode\nlibrary(dplyr)\nlibrary(gg3D)\nlibrary(plotly)\n\nflockers &lt;- read.table('traces.csv', sep=' ', header = TRUE)\n\n\nIt’s worth noting that plotly rescales all the coordinates here (because I ask it to with asp = 1) but that’s probably best for giving a general impression of the patterns.\n\n\nCode\nplot_ly(group_by(flockers, who), \n        x = ~x, y = ~y, z = ~t, color = ~who, colors = \"magma\",\n        type = 'scatter3d', mode = 'lines', asp = 1, lwd = 0.5)\n\n\n\n\n\n\nNot nearly as much fun is the static plot (like the “library in a theme park”, as my favourite cricketer once said).\n\n\nCode\nggplot(flockers, aes(x = x, y = y, z = t, group = who, color = who)) +\n  stat_3D(theta = 135, phi = 35, geom = \"path\",\n          linewidth = 0.35, alpha = 0.75) +\n  scale_color_viridis_c(option = \"A\") +\n  coord_equal() +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap7/questions-7.html",
    "href": "chapters/chap7/questions-7.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by Agência Brasil used under a Creative Commons Attribution 3.0 Brazil license\nIt’s about time…\nHave the cartographic origins of GIS (and by extension giscience) doomed it to struggling to adequately handle time and change?\nConsider here what the possibilities might have been for a different GIS origin story. How would GIS be different if it had emerged after cinema or immersive video games?\nAre maps (and by extension GIS) truly static? In what ways do maps and GIS differ from this perspective?\nWhat distinguishes contemporary approaches to ‘place’ from Hartshorne’s regional geography?\nIn the text I am (perhaps overly) kind to Hartshorne. But then I think many others have been overly unkind to him. Unfortunately he does go on a bit (OK… a lot) so it’s perhaps easier to ignore him that take him eriously.1\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap7/questions-7.html#footnotes",
    "href": "chapters/chap7/questions-7.html#footnotes",
    "title": "Discussion questions",
    "section": "References",
    "text": "References\n\n\nHartshorne R. 1939. The nature of geography: A critical survey of current thought in the light of the past. Annals of the Association of American Geographers, 39(3/4), 173–658.↩︎"
  },
  {
    "objectID": "chapters/chap9/questions-9.html",
    "href": "chapters/chap9/questions-9.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by Zsemle Zsemle used under a Creative Commons Attribution 3 Unported license\n\n\n\nSo… you (I am guessing) have taken some GIS and some geography classes. Excepting the class that has exposed you to this book do you agree that GIS and geography are taught too much in isolation from one another?\nThat was my experience (see the introduction) both as student and professor. Is there a better way?\nHow would you redesign geography (and spatial data science, giscience, data science… whatever) curricula to improve things?\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/fig5-06-simple-maup.html",
    "href": "chapters/chap5/fig5-06-simple-maup.html",
    "title": "Figure 5.6 Simple illustration of the modifiable areal unit problem",
    "section": "",
    "text": "I’ve remade this one in colour, because I think it’s a bit easier to see this way.\nSome libraries:\n\n\nCode\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n\nWe need to make a grid of values, with a clear gradient in one direction. The code for making geometries in R is ugly, so I’ve hidden it.\n\n\nCode\nmake_square &lt;- function(x = 0, y = 0, d = 1) {\n  xs &lt;- x + c(-1,  1, 1, -1, -1) * d / 2\n  ys &lt;- y + c(-1, -1, 1,  1, -1) * d / 2\n  st_polygon(list(matrix(c(xs, ys), ncol = 2)))\n}\n\ngrid &lt;- expand_grid(x = 1:10, y = 1:10) |&gt; as_tibble()\n\npolys &lt;- list()\nfor (r in 1:nrow(grid)) {\n  polys &lt;- c(polys, make_square(x = grid$x[r], y = grid$y[r]))\n}\n\npoly_sf &lt;- polys |&gt; \n  lapply(list) |&gt;\n  lapply(st_polygon) |&gt;\n  st_sfc() |&gt;\n  st_sf(x = grid[, 1], y = grid[, 2])\n\npoly_sf$z &lt;- poly_sf$x + runif(nrow(poly_sf), -0.5, 0.5)\n\n\nAnyway… we have a 10 by 10 grid of squares with values that increase from left to right:\n\n\nCode\nbrks &lt;- .5 + (0:100) / 10\n\nggplot(poly_sf) + \n  geom_sf(aes(fill = z)) + \n  scale_fill_distiller(palette = \"Spectral\") +\n  guides(fill = \"none\") + \n  theme_void()\n\n\n\n\n\n\n\n\n\nNow we aggregate into columns and rows, taking the mean value of our variable in each case, and then assembling them into a single dataset with a variable aggregation which we can use to ‘facet’ the results in to two maps.\n\n\nCode\ncolumn_sf &lt;- poly_sf |&gt;\n  group_by(x) |&gt;\n  summarise(z = mean(z)) |&gt;\n  mutate(aggregation = \"by column\")\n\nrow_sf &lt;- poly_sf |&gt;\n  group_by(y) |&gt;\n  summarise(z = mean(z)) |&gt;\n  mutate(aggregation = \"by row\")\n\naggregated_data &lt;- bind_rows(column_sf, row_sf)\n\n\nAnd now we can make maps of the results. The column-wise aggregation emphasizes the gradient, while the row-wise aggregation erases it completely, since every row has a similar set of values ranging from low to high, and when these are combined each row ends up pretty much the same.\n\n\nCode\nggplot(aggregated_data) +\n  geom_sf(aes(fill = z)) + \n  scale_fill_distiller(palette = \"Spectral\") +\n  guides(fill = \"none\") + \n  facet_wrap( ~ aggregation) +\n  theme_void() +\n  theme(strip.text = element_text(size = 14, margin = margin(2, 0, 2, 0, \"pt\")))\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/links-5.html",
    "href": "chapters/chap5/links-5.html",
    "title": "Links for Chapter 5",
    "section": "",
    "text": "Figure 5.2\nThis Figure is a section of the map of the Cooch Behar enclave complex, available at commons.wikimedia.org. Highly detailed maps of the enclave complex are available in Brendan Whyte’s PhD thesis available here.\n\n\nFigure 5.10\nThe data for this Figure are at the link noted in the Figure caption github.com/lucguillemot/bayareageodemo. There’s an interactive map at lucguillemot.github.io/bayareageodemo/. The map was designed by the very talented Luc Guillemot.\n\n\nFootnote 17\nThe Manaaki Whenua Landcare Research’s Land Environments of New Zealand website is at landcareresearch.co.nz/tools-and-resources/mapping/lenz/. Input data layers on which the LENZ classification was based are available at lris.scinfo.org.\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/index.html",
    "href": "chapters/chap5/index.html",
    "title": "Chapter 5",
    "section": "",
    "text": "Lines are more or less the defining characteristic of maps, invested with all kinds of meaning, not least the demarcation of nation states, properties, and all kinds of administrative entities. In giscience this is recognised most obviously in the modifiable areal unit problem, setting to one side many of the deeper questions that the arbitrariness of such lines—their fiat nature raises (see §Fiat and Bona Fide Boundaries and Objects in particular).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks for Chapter 5\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.1 The 9-intersection model of topological relations\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.5 Maps of areas with widely varying populations\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.6 Simple illustration of the modifiable areal unit problem\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.7 The MAUP aggregation effect\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.10 Simple regionalization of San Francisco Bay Area\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion questions\n\n\n\nquestions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/fig5-01-9-intersection.html",
    "href": "chapters/chap5/fig5-01-9-intersection.html",
    "title": "Figure 5.1 The 9-intersection model of topological relations",
    "section": "",
    "text": "This page attempts to show the various spatial predicates of the 9-intersection model presented in Figure 5.1 in code.\nFirst we make some shapes.\n\n\nCode\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(stringr)\n\n# a circle\np1 &lt;- st_point(c(-2, 0)) |&gt; st_buffer(1, nQuadSegs = 90)\n# an identical circle\np2 &lt;- p1\n# same circle shifted to the right so it is touching\np3 &lt;- p1 + c(2, 0)\n# shifted circle scaled to half size\np4 &lt;- p3 * matrix(c(0.5, 0, 0, 0.5), 2, 2)\n# and shifted down so it's touching p3 and overlapping p4 \np5 &lt;- p4 + c(0, -0.5)\n# a donut to the side\np6 &lt;- st_difference(p3, p4) + c(2.1, 0)\n# and a circle overlapping the donut\np7 &lt;- p4 * matrix(c(1.5, 0, 0, 1.5), 2, 2) + c(2, -1)\n\npolys &lt;- st_sfc(list(p1, p2, p3, p4, p5, p6, p7)) |&gt; \n  st_sf() |&gt;\n  mutate(ID = as.factor(1:7), \n         dx = c(0, 0, .5, 0, 0, 0, 0), \n         dy = c(-1, 1, 2, 0, 0, 0, 0))\n\n\nMap and label these for reference.\n\n\nCode\nxy &lt;- polys |&gt; st_centroid() |&gt;\n  st_coordinates() |&gt;\n  as.data.frame() |&gt;\n  mutate(ID = polys$ID)\n\nggplot(polys) +\n  geom_sf(aes(fill = ID), colour = \"white\", alpha = 0.5) +\n  scale_fill_manual(\n    values = c(\"red\", \"dodgerblue3\", \"darkgreen\",\n               \"black\", \"yellow\", \"violet\", \"brown\")) +\n  geom_label_repel(data = xy, aes(x = X, y = Y, label = ID)) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nNow we can run various tests against the spatial predicates in turn. For example st_disjoint tells us the following.\n\n\nCode\npolys |&gt; st_disjoint()\n\n\nSparse geometry binary predicate list of length 7, where the predicate\nwas `disjoint'\n 1: 3, 4, 5, 6, 7\n 2: 3, 4, 5, 6, 7\n 3: 1, 2, 6, 7\n 4: 1, 2, 6, 7\n 5: 1, 2, 6, 7\n 6: 1, 2, 3, 4, 5\n 7: 1, 2, 3, 4, 5\n\n\nWe can compile the result of applying all the spatial predicates to these polygons into a table.\nThe details of how this is done don’t matter greatly, but if you are interested click into the code below. The core of it is based on the various st_* functions such as st_intersects or st_contains. These correspond, more or less to the relations identified in Figure 5.1. The spatial predicates available in the sf package in R correspond to those implemented in spatial databases such as PostGIS.\n\n\nCode\nget_spatial_query_as_vector &lt;- function(data, predicate) {\n  data |&gt; \n    predicate() |&gt;\n    lapply(str_c, collapse = \" \") |&gt;\n    unlist()\n}\n\nde9im &lt;- data.frame(\n  ID = polys$ID,\n  disjoint          = get_spatial_query_as_vector(polys, st_disjoint),\n  touches           = get_spatial_query_as_vector(polys, st_touches),\n  equals            = get_spatial_query_as_vector(polys, st_equals),\n  intersects        = get_spatial_query_as_vector(polys, st_intersects),\n  contains_properly = get_spatial_query_as_vector(polys, st_contains_properly),\n  contains          = get_spatial_query_as_vector(polys, st_contains),\n  within            = get_spatial_query_as_vector(polys, st_within),\n  covers            = get_spatial_query_as_vector(polys, st_covers),\n  covered_by        = get_spatial_query_as_vector(polys, st_covered_by)\n)\n\nknitr::kable(de9im)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\ndisjoint\ntouches\nequals\nintersects\ncontains_properly\ncontains\nwithin\ncovers\ncovered_by\n\n\n\n\n1\n3 4 5 6 7\n\n1 2\n1 2\n\n1 2\n1 2\n1 2\n1 2\n\n\n2\n3 4 5 6 7\n\n1 2\n1 2\n\n1 2\n1 2\n1 2\n1 2\n\n\n3\n1 2 6 7\n\n3\n3 4 5\n4\n3 4 5\n3\n3 4 5\n3\n\n\n4\n1 2 6 7\n\n4\n3 4 5\n\n4\n3 4\n4\n3 4\n\n\n5\n1 2 6 7\n\n5\n3 4 5\n\n5\n3 5\n5\n3 5\n\n\n6\n1 2 3 4 5\n\n6\n6 7\n\n6\n6\n6\n6\n\n\n7\n1 2 3 4 5\n\n7\n6 7\n\n7\n7\n7\n7\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/fig2-09-spatial-weights.html",
    "href": "chapters/chap2/fig2-09-spatial-weights.html",
    "title": "Figure 2.9 A range of spatial weights applied to polygon data",
    "section": "",
    "text": "This figure is intended to demonstrate the diversity of possible conceptualisations of ‘neighbour’ that are often deployed in spatial analysis contexts, and represent possible different approaches to relative space.\nThe spdep package I am using here is not the easiest to use. The best guidance on spdep I’ve found is in\nThe newer sfdep package is still finding its feet at time of writing (Oct 2023), but will likely be a better choice before long.\nCode\nlibrary(sf)\nlibrary(dplyr)\nlibrary(spdep)\nlibrary(sp)\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/fig2-09-spatial-weights.html#assembling-the-data",
    "href": "chapters/chap2/fig2-09-spatial-weights.html#assembling-the-data",
    "title": "Figure 2.9 A range of spatial weights applied to polygon data",
    "section": "Assembling the data",
    "text": "Assembling the data\nFirst read a polygons dataset. You’ll need to supply your own for this.\n\n\nCode\nchch &lt;- st_read(\"chch-sa2.gpkg\") # you need a spatial dataset\n\n\nspdep requires the data to be in the sp package format, so we convert to that.\n\n\nCode\npolys &lt;- chch |&gt;\n  select(geom) |&gt;\n  as(\"Spatial\")\n\n\nNow make some points inside the polygons, and also some centroids.\n\n\nCode\n# guaranteed inside the polygons\npts &lt;- chch |&gt;\n  st_point_on_surface() |&gt; \n  st_geometry()\n\n# not guaranteed, but better(?) for distance measurements\npts_c &lt;- chch |&gt;\n  st_centroid() |&gt; \n  st_geometry()"
  },
  {
    "objectID": "chapters/chap2/fig2-09-spatial-weights.html#maps-of-adjacencies-based-on-different-rules",
    "href": "chapters/chap2/fig2-09-spatial-weights.html#maps-of-adjacencies-based-on-different-rules",
    "title": "Figure 2.9 A range of spatial weights applied to polygon data",
    "section": "Maps of adjacencies based on different rules",
    "text": "Maps of adjacencies based on different rules\nThese are presented in a single figure in the book in four rows of three. Here I show them as sets of three for greater clarity.\n\nContiguity based\n\n\nCode\nlayout(matrix(1:3, ncol = 3, byrow = TRUE))\npar(mai = c(0, 0, 0.15, 0))\n\nnb &lt;- polys |&gt; poly2nb(queen = TRUE)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"Queen's rule adjacency\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\nnb &lt;- polys |&gt; poly2nb(queen = FALSE)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"Rook's rule adjacency\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\nnb &lt;- nb |&gt; nblag(2) |&gt; nblag_cumul()\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"Cumulative lag-2 adjacency\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nk-nearest neighbours\nNote that we use the centroids (pts_c) to calculate the distances, but the points inside the polygons (pts) from st_point_on_surface() for the plotting.\n\n\nCode\nlayout(matrix(1:3, ncol = 3, byrow = TRUE))\npar(mai = c(0, 0, 0.15, 0))\n\nnb &lt;- pts_c |&gt; knearneigh(k = 3) |&gt; knn2nb()\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"k = 3\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\nnb &lt;- pts_c |&gt; knearneigh(k = 6) |&gt; knn2nb()\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"k = 6\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\nnb &lt;- pts_c |&gt; knearneigh(k = 12) |&gt; knn2nb()\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"k = 12\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nDistance criteria\nNext, distance criteria, again calculated from centroids, but visualised using the st_point_on_surface().\n\n\nCode\nlayout(matrix(1:3, ncol = 3, byrow = TRUE))\npar(mai = c(0, 0, 0.15, 0))\n\nnb &lt;- pts_c |&gt; dnearneigh(d1 = 0, d2 = 1000)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"Distance &lt; 1000\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\nnb &lt;- pts_c |&gt; dnearneigh(d1 = 0, d2 = 1500)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"Distance &lt; 1500\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\nnb &lt;- pts_c |&gt; dnearneigh(d1 = 1500, d2 = 2000)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"1500 &lt; Distance &lt; 2000\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nGraph-based approaches\nFinally, some network-based possibilities, Delaunay triangulation, Gabriel graph and the relative neighbour graph.\n\n\nCode\nlayout(matrix(1:3, ncol = 3, byrow = TRUE))\npar(mai = c(0, 0, 0.15, 0))\n\ng &lt;- tri2nb(pts_c)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"Delaunay triangulation\")\nplot(g, pts, col = 'red', lwd = 0.5, add = TRUE)\n\ng &lt;- gabrielneigh(pts_c)\nnb &lt;- graph2nb(g)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"Gabriel graph\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\ng &lt;- relativeneigh(pts_c)\nnb &lt;- graph2nb(g)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', \n     main = \"Relative neighbour graph\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap2/fig2-06-slivers-and-gaps.html",
    "href": "chapters/chap2/fig2-06-slivers-and-gaps.html",
    "title": "Figures 2.6 Slivers and gaps in a polygon layer",
    "section": "",
    "text": "Here is how slivers and gaps can happen…\nRead in some polygons.\n\n\nCode\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(cols4all)\nlibrary(dplyr)\n\npolygons &lt;- st_read(\"some-polygons.gpkg\")\n\n\nSimplify them without due care and attention, and voila!\n\n\nCode\nall_polys_1 &lt;- bind_rows(\n  polygons |&gt; \n    mutate(source = \"Source polygons\"),\n  polygons |&gt; \n    st_simplify(dTolerance = 100) |&gt; \n    mutate(source = \"Source polygons simplified\")\n)\nggplot(all_polys_1) +\n  geom_sf(aes(fill = name), alpha = 0.35, lwd = 0) +\n  scale_fill_discrete_c4a_cat(palette = \"palette36\") +\n  guides(fill = \"none\") +\n  facet_wrap( ~ source) +\n  theme_void() +\n  theme(\n    strip.text = element_text(size = 16, \n                              margin = margin(3, 0, 3, 0, \"pt\")))\n\n\n\n\n\n\n\n\n\nBy contrast if we use the simplification function from rmapshaper topology is preserved, even with pretty dramatic simplification (here retaining only 25% of polygon vertices.)\n\n\nCode\nlibrary(rmapshaper)\n\nall_polys_2 &lt;- bind_rows(\n  polygons |&gt; \n    mutate(source = \"Source polygons\"),\n  polygons |&gt; \n    ms_simplify(keep = 0.25) |&gt; \n    mutate(source = \"Topology preserved\")\n)\nggplot(all_polys_2) +\n  geom_sf(aes(fill = name), alpha = 0.35, lwd = 0) +\n  scale_fill_discrete_c4a_cat(palette = \"palette36\") +\n  guides(fill = \"none\") +\n  facet_wrap( ~ source) +\n  theme_void() +\n  theme(\n    strip.text = element_text(size = 16, \n                              margin = margin(3, 0, 3, 0, \"pt\")))\n\n\n\n\n\n\n\n\n\nThe rmapshaper::topojson_write function also allows you to write your polygons out to the topology preserving TopoJSON format.\nrmapshaper is associated with the excellent MapShaper tool.\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/fig2-08-non-point-voronoi.html",
    "href": "chapters/chap2/fig2-08-non-point-voronoi.html",
    "title": "Figure 2.8 Voronoi polygons associated with lines and polygons",
    "section": "",
    "text": "This figure was mostly prepared in QGIS, but an R version is provided here to show the steps involved.\nDifferences between the versions are due to the original being prepared across a wider extent which was then clipped down to the final extent. The input data used here are already clipped to the final extent meaning there may be anomalies near the edges.\nCode\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/fig2-08-non-point-voronoi.html#load-data",
    "href": "chapters/chap2/fig2-08-non-point-voronoi.html#load-data",
    "title": "Figure 2.8 Voronoi polygons associated with lines and polygons",
    "section": "Load data",
    "text": "Load data\nYou’ll need your own roads and buildings data. Mine came from OpenStreetMap via the QGIS QuickOSM plugin.\n\n\nCode\nroads &lt;- st_read(\"final-roads.gpkg\") |&gt;\n  select(full_id, osm_id)\nbldgs &lt;- st_read(\"final-buildings.gpkg\") |&gt;\n  select(full_id, osm_id)\n\n\nAnd a quick map to see what we’re working with.\n\n\nCode\nggplot(bldgs) +\n  geom_sf() +\n  geom_sf(data = roads) +\n  coord_sf(expand = FALSE) +\n  theme_void() +\n  theme(panel.border = element_rect(fill = NA, linewidth = 1.5))"
  },
  {
    "objectID": "chapters/chap2/fig2-08-non-point-voronoi.html#interpolate-points-along-the-lines-and-polygon-boundaries",
    "href": "chapters/chap2/fig2-08-non-point-voronoi.html#interpolate-points-along-the-lines-and-polygon-boundaries",
    "title": "Figure 2.8 Voronoi polygons associated with lines and polygons",
    "section": "Interpolate points along the lines and polygon boundaries",
    "text": "Interpolate points along the lines and polygon boundaries\nPlace points along the boundaries of each of these.\nFor the roads we combine all elements into a single line object and assign the same id to every point generated.\n\n\nCode\nr_pts &lt;- roads |&gt;\n  st_union() |&gt;\n  st_cast(\"LINESTRING\") |&gt;\n  st_line_sample(density = 1) |&gt;\n  st_cast(\"POINT\") |&gt;\n  st_as_sf() |&gt;\n  rename(geometry = x) |&gt; # geom column gets misnamed 'x' \n  mutate(id = \"0\")\n\n\nFor the buildings we wish to retain the building IDs, so we do a join based on the nearest feature in the buildings dataset.\n\n\nCode\nb_pts &lt;- bldgs |&gt;\n  st_cast(\"MULTILINESTRING\") |&gt;\n  st_cast(\"LINESTRING\") |&gt;\n  # if any perimeter is &lt; 1 then the sampling step fails\n  filter(st_length(geom) &gt;= units::as_units(1, \"m\")) |&gt;\n  st_line_sample(density = 1) |&gt;\n  st_cast(\"POINT\") |&gt;\n  st_as_sf() |&gt;\n  rename(geometry = x) |&gt;\n  st_join(bldgs, join = st_nearest_feature) |&gt;\n  mutate(id = full_id) |&gt;\n  select(id)"
  },
  {
    "objectID": "chapters/chap2/fig2-08-non-point-voronoi.html#make-the-point-voronoi-polygons",
    "href": "chapters/chap2/fig2-08-non-point-voronoi.html#make-the-point-voronoi-polygons",
    "title": "Figure 2.8 Voronoi polygons associated with lines and polygons",
    "section": "Make the point Voronoi polygons",
    "text": "Make the point Voronoi polygons\nNow combine the two into a single point dataset.\n\n\nCode\nall_pts &lt;- bind_rows(r_pts, b_pts)\n\n\nNow make a Voronoi layer from the points.\n\n\nCode\npts_vor &lt;- all_pts |&gt;\n  st_union() |&gt;\n  st_voronoi() |&gt;\n  st_cast() |&gt;\n  st_as_sf() |&gt;\n  st_join(all_pts, left = FALSE) \n\n\nWe need to clip this to the extent of the buildings data.\n\n\nCode\nextent &lt;- bldgs |&gt;\n  st_bbox() |&gt;\n  st_as_sfc() |&gt;\n  st_sf()\n\npts_vor &lt;- pts_vor |&gt;\n  st_intersection(extent)\n\nplot(pts_vor, main = \"Voronoi of all points\", key.pos = NULL)"
  },
  {
    "objectID": "chapters/chap2/fig2-08-non-point-voronoi.html#finally-form-the-line-and-polygon-voronois",
    "href": "chapters/chap2/fig2-08-non-point-voronoi.html#finally-form-the-line-and-polygon-voronois",
    "title": "Figure 2.8 Voronoi polygons associated with lines and polygons",
    "section": "Finally form the line and polygon Voronois",
    "text": "Finally form the line and polygon Voronois\nNow we dissolve (group_by) on the id attribute.\n\n\nCode\ndiss_vor &lt;- pts_vor |&gt;\n  group_by(id) |&gt;\n  summarise()\n\nplot(diss_vor, main = \"Dissolved Voronois\", key.pos = NULL)"
  },
  {
    "objectID": "chapters/chap2/fig2-08-non-point-voronoi.html#make-a-map",
    "href": "chapters/chap2/fig2-08-non-point-voronoi.html#make-a-map",
    "title": "Figure 2.8 Voronoi polygons associated with lines and polygons",
    "section": "Make a map",
    "text": "Make a map\nFinally, we can make a map, similar to the one in Figure 2.8 in the book.\n\n\nCode\nbb &lt;- st_bbox(extent)\nggplot() +\n  geom_sf(data = bldgs, \n          lwd = 0) +\n  geom_sf(data = roads |&gt; st_buffer(2) |&gt; st_intersection(extent), \n          fill = \"#cc9999\", lwd = 0) +\n  geom_sf(data = all_pts |&gt; st_filter(extent |&gt; st_buffer(-.1)), \n          colour = \"black\", size = 0.1) +\n  geom_sf(data = pts_vor, \n          colour = \"lightgray\", fill = NA, lwd = 0.35) +\n  geom_sf(data = diss_vor, \n          colour = \"black\", fill = NA) +\n  coord_sf(expand = FALSE) +\n  theme_void() +\n  theme(panel.border = element_rect(fill = NA, linewidth = 1.5))\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap2/fig2-07-point-voronoi.html",
    "href": "chapters/chap2/fig2-07-point-voronoi.html",
    "title": "Figure 2.7 Voronoi polygons associated with a set of point locations",
    "section": "",
    "text": "This is most conveniently made using spatstat, but I’ve shown it here making a point pattern into an sf dataset and then using sf::st_voronoi().\n\n\nCode\nlibrary(spatstat)\nlibrary(sf)\nlibrary(ggplot2)\n\n\nThere are a few steps making a spatstat point pattern into a simple features dataset…\n\n\nCode\npp &lt;- rpoispp(100) |&gt;\n  as.data.frame() |&gt;\n  st_as_sf(coords = c(\"x\", \"y\"), crs = 2193)\n\n\nAnd there are a few more making a point dataset into a Voronoi polygon dataset.\n\n\nCode\npp_vor &lt;- pp |&gt;\n  st_union() |&gt;\n  st_voronoi() |&gt;\n  st_cast() |&gt;\n  st_as_sf(crs = st_crs(pp))\n\n\nAnd finally a map.\n\n\nCode\nggplot(pp_vor) +\n  geom_sf(fill = \"#dddddd\", color = \"white\", lwd = 0.5) +\n  geom_sf(data = pp, colour = \"black\", shape = 1, size = 2) +\n  coord_sf(xlim = c(-0.05, 1.05), ylim = c(-0.05, 1.05), expand = FALSE) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/fig2-04-ppa-relative-space.html",
    "href": "chapters/chap2/fig2-04-ppa-relative-space.html",
    "title": "Figure 2.4 Two point patterns in absolute space",
    "section": "",
    "text": "Although it is labelled ‘point patterns in absolute space’, the real (ahem) point of this figure is that spatial analysis often works, in effect, with a relative concept of space, since it is based on notions as here, such as the distances between points.\nIf you want point patterns, you need the fantastic spatstat by Adrian Baddeley, Ege Rubak, and Rolf Turner.\n\n\nCode\nlibrary(spatstat)\n\n\nMake a couple of point patterns, one evenly-space using sequential spatial inhibition, and one clustered using a Thomas process. For the latter, see\n\nThomas M. 1949. A generalisation of Poisson’s binomial limit for use in ecology. Biometrika 36, 18–25.\n\n\n\nCode\npp1 &lt;- rSSI(0.07, n = 105)\npp2 &lt;- rThomas(10, 0.03, 10)\n\n\nCalculate nearest neighbour distances.\n\n\nCode\nnn1 &lt;- nndist(pp1)\nnn2 &lt;- nndist(pp2)\nmax_d &lt;- ceiling(max(c(nn1, nn2)) * 10) / 10\nbreaks &lt;- seq(0, max_d, length.out = 10)\n\n\nAnd plot them.\n\n\nCode\npar(mai = rep(0.3, 4))\nlayout(matrix(1:4, 2, 2, byrow = TRUE))\n\nplot(pp1, main = \"\")\nhist(nn1, main = \"\", xlab = \"Distance\", ylab = \"Frequency\", breaks = breaks)\nplot(pp2, main = \"\")\nhist(nn2, main = \"\", xlab = \"Distance\", ylab = \"Frequency\", breaks = breaks)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/fig3-08-loxodrome.html",
    "href": "chapters/chap3/fig3-08-loxodrome.html",
    "title": "Figure 3.8 A loxodrome on the sphere and projected",
    "section": "",
    "text": "The figure produced below extends to ±89° which makes the point even more clearly, but doesn’t give a nice square Mercator projected map. See also Jason Davies’ page about loxodromes for more on this, including a couple of figures that probably on some level inspired mine. Indeed, Jason Davies’ pages include some gems for exploring the variety of global projections. See, for example, Map Projection Transitions.\nCode\nlibrary(dplyr)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(smoothr) # this is for interpolating along lines\nSome theming for the maps.\nCode\ntheme_set(theme_void()) \ntheme_update(\n  panel.background = element_rect(fill = NA, colour = NA),\n  panel.grid = element_line(colour = \"black\", linewidth = 0.05),\n  panel.ontop = TRUE\n)\nThis process is pretty complicated to do in R, so we need a bunch of helper functions. First, it is the default for sf now, but just to make the point, we intially use S2 mode, so that when we clip data with a hemisphere it does it properly.\nCode\nsf_use_s2(TRUE)\nAlso, define an orthographic projection for the globe view.\nCode\northo_proj &lt;- \"+proj=ortho lon_0=0 lat_0=40\"\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/fig3-08-loxodrome.html#make-a-hemisphere",
    "href": "chapters/chap3/fig3-08-loxodrome.html#make-a-hemisphere",
    "title": "Figure 3.8 A loxodrome on the sphere and projected",
    "section": "Make a hemisphere",
    "text": "Make a hemisphere\nMake a hemisphere for the globe view, and apply it to the built-in World dataset that ships with tmap.\n\n\nCode\nhemisphere &lt;- st_point(c(0, 0)) |&gt;\n  st_buffer(6356752) |&gt;\n  st_sfc(crs = ortho_proj) |&gt;\n  densify() |&gt;\n  st_transform(4326)\n\ndata(\"World\")\nworld_o &lt;- World |&gt;\n  st_intersection(hemisphere) |&gt;\n  st_transform(ortho_proj) |&gt;\n  filter(st_is_empty(geometry) == FALSE)"
  },
  {
    "objectID": "chapters/chap3/fig3-08-loxodrome.html#helper-functions-for-coordinate-transformations",
    "href": "chapters/chap3/fig3-08-loxodrome.html#helper-functions-for-coordinate-transformations",
    "title": "Figure 3.8 A loxodrome on the sphere and projected",
    "section": "Helper functions for coordinate transformations",
    "text": "Helper functions for coordinate transformations\nNext, convenience ‘helper’ functions for converting coordinate pairs between projections, and converting degrees to radians. By default it will convert longitude-latitude to Mercator.\n\n\nCode\nx1y1_to_x2y2 &lt;- function(coords, crs1 = 4326, crs2 = \"+proj=merc\") {\n  coords |&gt; st_point() |&gt;\n    st_sfc(crs = crs1) |&gt;\n    st_transform(crs2) |&gt;\n    st_coordinates() |&gt;\n    c()\n}\n\nget_radians &lt;- function(d) {\n  d * pi / 180\n}"
  },
  {
    "objectID": "chapters/chap3/fig3-08-loxodrome.html#making-a-loxodrome",
    "href": "chapters/chap3/fig3-08-loxodrome.html#making-a-loxodrome",
    "title": "Figure 3.8 A loxodrome on the sphere and projected",
    "section": "Making a loxodrome",
    "text": "Making a loxodrome\nThe next function makes a loxodrome line of equal bearing, starting from 89°S 180°E, and ending when it hits latitude 89°N (latitude range is determined by the lat parameter). The calculations are done in Mercator coordinates, since it is in this projection that a loxodrome is a straight line.\n\n\nCode\nget_loxodrome &lt;- function(lat = -89, bearing = 85, n = 100) {\n  transects &lt;- c() # empty vector for the west to east transects\n  pt &lt;- c(-180, lat)\n\n  # we keep going until we hit the latitude at lat North\n  while(TRUE && pt[2] &lt; -lat) {\n    p1 &lt;- x1y1_to_x2y2(pt) # convert to Mercator\n    # get the point at +180, ie 2 * pi radians in Mercator\n    p2 &lt;- c(-p1[1],         \n            p1[2] + tan(get_radians(90 - bearing)) * -2 * p1[1])\n    # the line is a densified version of this\n    transect &lt;- st_linestring(matrix(c(p1, p2), 2, 2, byrow = TRUE)) |&gt;\n      st_sfc(crs = \"+proj=merc\") |&gt;\n      densify(n) # the densification step (provided by smoothr)\n    transects &lt;- c(transects, transect)\n    # reset p1 to 'the other side' of the Mercator space i.e. -180\n    p1 &lt;- p2\n    pt &lt;- x1y1_to_x2y2(p1, crs1 = \"+proj=merc\", crs2 = 4326)\n    pt[1] &lt;- -180\n  }\n  # transects need tidying so they extend equally far N and S of equator\n  # max y coordinate should be the inverse of the minimum y coordinate\n  ymax &lt;- x1y1_to_x2y2(c(0, -lat))[2]\n  # apply this limit to the points along the last transect from west to east\n  n_transects &lt;- length(lines)\n  # convert the last transect to a set of points, to apply this limit\n  pts &lt;- transects[[n_transects]] |&gt;\n    st_cast(\"MULTIPOINT\") |&gt;\n    st_coordinates()\n  pts &lt;- pts[pts[, 2] &lt;= ymax, 1:2]\n  # and then convert back to a linestring\n  transects[[n_transects]] &lt;- pts |&gt;\n    matrix(ncol = 2) |&gt;\n    st_linestring()\n  # finally convert to lon-lat i.e. EPSG 4326\n  transects |&gt; st_sfc(crs = \"+proj=merc\") |&gt;\n    st_as_sf() |&gt;\n    st_transform(4326)\n}"
  },
  {
    "objectID": "chapters/chap3/fig3-08-loxodrome.html#now-make-the-figure",
    "href": "chapters/chap3/fig3-08-loxodrome.html#now-make-the-figure",
    "title": "Figure 3.8 A loxodrome on the sphere and projected",
    "section": "Now make the figure!",
    "text": "Now make the figure!\n\nAssemble the layers\nMake a loxodrome and clip the world to the chosen latitude limits. To apply rectangular projection based limits we have to switch to planar geometry in sf. We have to do this because we can’t show the whole world in Mercator…\n\n\nCode\nlox &lt;- get_loxodrome() \nlox_o &lt;- lox |&gt;\n  st_intersection(hemisphere)\n\nsf_use_s2(FALSE)\n\nmercator_limits &lt;- st_polygon(list(\n  matrix(c(-180, -89, 180, -89, 180, 89, -180, 89, -180, -89),\n  ncol = 2, byrow = TRUE))) |&gt;\n  st_sfc(crs = 4326) |&gt;\n  st_as_sf()\n\nworld_m &lt;- World |&gt; \n  st_intersection(mercator_limits) |&gt;\n  st_transform(\"+proj=merc\") |&gt;\n  filter(st_is_empty(geometry) == FALSE)\n\nlox_m &lt;- lox |&gt;\n  st_intersection(mercator_limits)\n\n\n\n\nPut them together\nAnd finally make the maps.\n\n\nCode\ng1 &lt;- ggplot() +\n  geom_sf(data = world_o, fill = \"lightgray\", colour = NA) +\n  geom_sf(data = lox_o, colour = \"black\") +\n  coord_sf(expand = FALSE) +\n  scale_x_continuous(breaks = -12:12 * 15) +\n  scale_y_continuous(breaks = -6:6 * 15)\n\nbb &lt;- mercator_limits |&gt;\n  st_transform(\"+proj=merc\") |&gt;\n  st_bbox(mercator_limits)\n\ng2 &lt;- ggplot() +\n  geom_sf(data = world_m, fill = \"lightgray\", colour = NA) +\n  geom_sf(data = lox_m, colour = \"black\") +\n  coord_sf(expand = FALSE) +\n  scale_x_continuous(breaks = -12:12 * 15, limits = bb[c(1, 3)]) +\n  scale_y_continuous(breaks = -6:6 * 15, limits = bb[c(2, 4)])\n\nggpubr::ggarrange(g1, g2)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap3/fig3-10-raster-resolution.html",
    "href": "chapters/chap3/fig3-10-raster-resolution.html",
    "title": "Figure 3.10 Raster aggregation and disaggregation",
    "section": "",
    "text": "This figure shows how you can’t recover raster information after aggregation.\n\n\nCode\nlibrary(terra)\nlibrary(tmap)\nlibrary(cols4all)\nlibrary(dplyr)\n\n\nGet the data—you’ll need some of your own data here.\n\n\nCode\nz &lt;- rast(\"raster-data.tif\")\n\n\nAggregate and disaggregate by 10\n\n\nCode\nz10 &lt;- z |&gt; \n  aggregate(10)\n\nz_dash &lt;- z10 |&gt;\n  resample(z)\n\n\nMake maps. For the images in the book, I dissolved the raster layers to polygons to create smaller SVG outputs that I was better able to control in making final graphics. For online, I don’t need to worry about that.\n\n\nCode\nm1 &lt;- tm_shape(z) + \n  tm_raster(\n    col.scale = tm_scale(breaks = seq(180, 280, 10),\n                         values = \"brewer.br_bg\")) + \n  tm_layout(frame = FALSE, legend.show = FALSE)\n\nm2 &lt;- tm_shape(z10) + \n  tm_raster(\n    col.scale = tm_scale(breaks = seq(180, 280, 10),\n                         values = \"brewer.br_bg\")) + \n  tm_layout(frame = FALSE, legend.show = FALSE)\n\nm3 &lt;- tm_shape(z_dash) + \n  tm_raster(\n    col.scale = tm_scale(breaks = seq(180, 280, 10),\n                         values = \"brewer.br_bg\")) + \n  tm_layout(frame = FALSE, legend.show = FALSE)\n\ntmap_arrange(m1, m2, m3)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/index.html",
    "href": "chapters/chap3/index.html",
    "title": "Chapter 3",
    "section": "",
    "text": "Chapter 3 explores geographical thinking and giscience perspectives on scale. Thinking about cartographic scale inevitably demands exploration of map projections, which are also considered.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks for Chapter 3\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.4 Three twenty levels of web map hierarchy\n\n\n\ncode\n\n\nR\n\n\nextras\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.7 Two simple world projections\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.8 A loxodrome on the sphere and projected\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.9 Equal area world in a square\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.10 Raster aggregation and disaggregation\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion questions\n\n\n\nquestions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/questions-3.html",
    "href": "chapters/chap3/questions-3.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by Hameltion used under a Creative Commons Attribution-Share Alike 4.0 International license\nIs scale all in our heads?\nHave you come across any studies that range across the 10 to 15 orders of magnitude referenced on pages 46-47?\nWhat topics might demand consideration of such a wide range of scales? And what would the challenges be of studying such topics? How does working with scale hierarchies in this context help?\nAll things considered, does it really only make sense to think of scale as socially constructed? Does scale really exist independent of human observation? Note that this is also an inference we might draw from the giscience perspectives on scale presented by Montello1 and Couclelis2, discussed on pages 57-60.\nWould geography be better off ‘without scale’? Some of the leading protagonists in the ‘scale debates’ of the 1990s, eventually argued for an abandonment of the concept of scale.3 What would be the implications of such a move?\nZoomable web-maps are maps without scale. Discuss! Also for discussion: explicitly relating scale and map projection in the way it is done in this chapter might strike some as a bit of a reach. What do you think?\nIs map generalization just ‘lying with maps’? Mark Monmonier suggests in How to Lie with Maps that cartographic generalisation is unavoidable and inevitably makes maps misleading.4 Is lying an appropriate framework for thinking about map generalisation?\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/questions-3.html#footnotes",
    "href": "chapters/chap3/questions-3.html#footnotes",
    "title": "Discussion questions",
    "section": "References",
    "text": "References\n\n\nMontello DR. 1993. Scale and multiple psychologies of space. In AU Frank and I Campari (eds) Spatial Information Theory: A Theoretical Basis for GIS, pages 312-321. Lecture Notes in Computer Science 716. Springer.↩︎\nCouclelis H. 1992. People manipulate objects (but cultivate fields): Beyond the raster-vector debate in GIS. In AU Frank, I Campari, and U Formentini (eds) Theories and Methods of Spatio-Temporal Reasoning in Geographic Space, pages 65–77. Lecture Notes in Computer Science 639. Springer.↩︎\nMarston SA, JP Jones III, and K Woodward. 2005. Human geography without scale. Transactions of the Institute of British Geographers 30(4) 416–432.↩︎\nMonmonier MS. 2018. How to Lie with Maps. 3rd edition. Chicago: The University of Chicago Press.↩︎"
  },
  {
    "objectID": "chapters/chap4/fig4-01-hierarchical-indexing.html",
    "href": "chapters/chap4/fig4-01-hierarchical-indexing.html",
    "title": "Figure 4.1 Geohashes and hierarchical indexing",
    "section": "",
    "text": "I made this figure by hand in Inkscape, which was kind of fun, if a little tedious, given all the repetition involved. Here I show what I could have done instead in R.\nCode\nlibrary(dplyr)\nlibrary(tidyr)\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap4/fig4-01-hierarchical-indexing.html#the-z-order-morton-and-hilbert-curves",
    "href": "chapters/chap4/fig4-01-hierarchical-indexing.html#the-z-order-morton-and-hilbert-curves",
    "title": "Figure 4.1 Geohashes and hierarchical indexing",
    "section": "The Z-order (Morton) and Hilbert curves",
    "text": "The Z-order (Morton) and Hilbert curves\nThe first two are general indexing schemes with deep mathematical roots, so unsurprisingly there are R packages for working with them. The morton package is only available on github so you will need devtools to install it, while hilbert is on CRAN. Because I can, I’ve made these bigger than the laboriously hand-crafted examples in the book.\n\n\nCode\nlibrary(morton)\nlibrary(hilbert)\n\n# make a data frame to put the numbers in\ndf &lt;- tibble(n = 1:1023) |&gt;\n  mutate(m1 = morton::fromMorton(n)[[1]],\n         m2 = -morton::fromMorton(n)[[2]])\n\n# the hilbert functions are hard to use with mutate, so \n# just use base R to make these\ndf$h1 &lt;- hilbert::position(df$n, n = 10)[, 1] + 33 # an offset\ndf$h2 &lt;- -hilbert::position(df$n, n = 10)[, 2]\n\n\nThat’s it—why didn’t I think of this earlier? And ggplot::geom_path() provides an easy way to plot the ‘curves’.\n\n\nCode\nlibrary(ggplot2)\n\nggplot(df) + \n  geom_path(aes(x = m1, y = m2), linewidth = 0.25) + \n  geom_path(aes(x = h1, y = h2), linewidth = 0.25) + \n  coord_equal() + \n  theme_void()"
  },
  {
    "objectID": "chapters/chap4/fig4-01-hierarchical-indexing.html#h3-hexagons",
    "href": "chapters/chap4/fig4-01-hierarchical-indexing.html#h3-hexagons",
    "title": "Figure 4.1 Geohashes and hierarchical indexing",
    "section": "H3 hexagons",
    "text": "H3 hexagons\nIf you like hexagons, you’ll love the h3forr package, which provides a spatial data friendly API for the H3 indexing scheme. There is an official H3 API for R but it focuses on the indexes and makes it harder work to fill spaces with hexagons, unlike the h3forr::polyfill() function.\nAnyway, here goes:\n\n\nCode\nlibrary(h3forr)\nlibrary(tmap)\nlibrary(sf)\nlibrary(maptiles)\n\n\nMake a 20km square near Wellington, Aotearoa.\n\n\nCode\nsquare &lt;- c(1.735e6 + 2e4 * c(0, 0, 1, 1, 0), \n            5.425e6 + 2e4 * c(0, 1, 1, 0, 0)) |&gt;\n  matrix(ncol = 2) |&gt;\n  list() |&gt;\n  st_polygon() |&gt;\n  st_sfc() |&gt;\n  st_sf(crs = 2193) |&gt;\n  st_transform(4326) # polyfill needs lat-lon\n\n\nA convenience function to wrap hsforr::polyfill() so that we retrieve all hexes within a buffered area of the supplied data.\n\n\nCode\nget_hexes &lt;- function(poly, resolution, distance) {\n  poly |&gt; \n    st_buffer(distance) |&gt;\n    polyfill(res = resolution) |&gt; \n    h3_to_geo_boundary() |&gt; \n    geo_boundary_to_sf()\n}\n\n\nThen get some hexagons.\n\n\nCode\nh3_4 &lt;- get_hexes(square, 4, 10000)\nh3_5 &lt;- get_hexes(square, 5, 5000)\nh3_6 &lt;- get_hexes(square, 6, 2500)\nh3_7 &lt;- get_hexes(square, 7, 1500)\nh3_8 &lt;- get_hexes(square, 8, 1000)\nh3_9 &lt;- get_hexes(square, 9, 750)\n\n\nAnd make a map. I’m using maptiles::get_tiles() to provide a base map.\n\n\nCode\nbasemap &lt;- get_tiles(square, zoom = 11, provider = \"CartoDB.Positron\")\n\ntm_shape(basemap, bbox = square) + tm_rgb() +\n  tm_shape(h3_4) + tm_borders(lwd = 5) +\n  tm_shape(h3_5) + tm_borders(lwd = 3) +\n  tm_shape(h3_6) + tm_borders(lwd = 2) +\n  tm_shape(h3_7) + tm_borders(lwd = 1) +\n  tm_shape(h3_8) + tm_borders(lwd = 0.5) +\n  tm_shape(h3_9) + tm_borders(lwd = 0.35) +\n  tm_credits(get_credit(\"CartoDB.Positron\"), bg.color = \"white\",\n             position = c(\"RIGHT\", \"BOTTOM\"), bg.alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap4/fig4-03-springfields.html",
    "href": "chapters/chap4/fig4-03-springfields.html",
    "title": "Figure 4.3 Many Springfields",
    "section": "",
    "text": "Many of the data preparation steps for this figure were initially carried out in QGIS. Here they have been implemented in R only.\nTo understand why this version is different from the published figure, read on…\nCode\nlibrary(sf)\nlibrary(tmap) # for its world map\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(units)\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap4/fig4-03-springfields.html#get-data",
    "href": "chapters/chap4/fig4-03-springfields.html#get-data",
    "title": "Figure 4.3 Many Springfields",
    "section": "Get data",
    "text": "Get data\nThe ‘Springfields’ data set was obtained using the following code (shown here but not run) to query the Nominatim geocoder.\n\n\nCode\nlibrary(sf)\nlibrary(dplyr)\nlibrary(stringr)\n\nquery &lt;- \"https://nominatim.openstreetmap.org/search\"\nplace &lt;- \"Springfield\"\nexcluded_places &lt;- \"\"\n\nresult &lt;- NULL\ngot_new_results &lt;- TRUE\nn_results &lt;- 0\nmax_n &lt;- 1000\n\nwhile (n_results &lt; max_n & got_new_results) {\n  url &lt;- str_flatten(c(\n    str_glue(\"{query}?q={place}&\"),\n    \"polygon_geojson=1&limit=50&format=geojson&\",\n    str_glue(\"exclude_place_ids={excluded_places}\")\n  ))\n  download.file(url, \"result.geojson\", quiet = TRUE, method = \"auto\")\n  next_result &lt;- st_read(\"result.geojson\")\n  got_new_results &lt;- dim(next_result)[1] &gt; 0\n  if (is.null(result)) {\n    result &lt;- next_result\n  } else {\n    result &lt;- bind_rows(result, next_result)\n  }\n  n_results &lt;- dim(result)[1]\n  excluded_places &lt;- str_flatten(result$place_id, collapse = \",\")\n  Sys.sleep(1)\n}\n\nresult &lt; result |&gt; \n  st_centroid() |&gt; \n  st_write(str_glue(\"all-results-{place}.geojson\"))"
  },
  {
    "objectID": "chapters/chap4/fig4-03-springfields.html#make-a-map",
    "href": "chapters/chap4/fig4-03-springfields.html#make-a-map",
    "title": "Figure 4.3 Many Springfields",
    "section": "Make a map",
    "text": "Make a map\nOK, with that done, we can make a map. The degree of difficulty is much increased by choosing a Briesemeister projection. We choose projections like this one not because they are easy, but because they are hard (something like that…). Anyway the published map is actually an oblique Hammer-Aitoff projection, and not the right kind of oblique projection to be a Briesemeister…\nRecently, I unearthed a proj string at Michael Minn’s website, in the R code for this page that produces the Briesemeister projection. (However… I suspect that code is no longer entirely valid as the +M parameter included in that string no longer seems to have any effect on the output and the linked proj manual is v4.3, which is a long way out of date.)\nAnyway, here’s the string we are using—but even this is not the full story as we will see later.\n\n\nCode\nbries &lt;- \"+proj=ob_tran +o_proj=hammer +o_lon_p=0 +o_lat_p=45 +lon_0=10\"\n\n\n\nDealing with that weird projection\nA world ‘disc’ for the background. Make this by buffering a point and stretching it to an ellipse with the Hammer projection extent.\n\n\nCode\ndisc &lt;- st_point(c(0, 0)) |&gt;\n  st_buffer(1, nQuadSegs = 90)\ndisc &lt;- disc * matrix(c(18040096, 0, 0, 9020048), 2, 2)\ndisc &lt;- disc |&gt;\n  st_sfc() |&gt;\n  data.frame() |&gt;\n  st_sf(crs = bries)\n\n\nThe world countries must be cut at the Briesemeister ‘cut line’ which is where there is a break in the projection, to avoid anomalies when places are projected that cross the line. We figured out where this line is in other work…\n\n\nCode\ndata(\"World\")\n\ncut_line &lt;- st_read(\"briesemeister-cut-corrected.geojson\") |&gt;\n  st_buffer(1000) # metres!\n\n\nReading layer `briesemeister-cut-corrected' from data source \n  `/Users/david/Documents/code/computing-geographically/chapters/chap4/briesemeister-cut-corrected.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 0 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -170 ymin: -89.99058 xmax: 10 ymax: 44.21063\nGeodetic CRS:  WGS 84\n\n\nCode\nworld &lt;- World |&gt;\n  st_difference(cut_line) |&gt;\n  st_transform(bries)\n\n\n\n\nMake a graticule\nA graticule - here we assemble this as linestrings (with many points) because projection of tm_graticules output can be problematic, especially if the projection has cuts other than at ±180° longitude (and even then it can have issues), or as in this case is in any way unusual.\n\n\nCode\nget_meridian &lt;- function(longitude) {\n  st_linestring(matrix(cbind(longitude, seq(-90, 90, 1)),\n                       ncol = 2, byrow = FALSE)) |&gt;\n    st_sfc(crs = 4326)\n}\n\nget_meridians &lt;- function(spacing = 10) {\n  g &lt;- c()\n  for (lon in seq(-180, 180 - spacing, spacing)) {\n    g &lt;- c(g, get_meridian(longitude = lon))\n  }\n  g\n}\n\nget_parallel &lt;- function(latitude) {\n  st_linestring(matrix(cbind(seq(-180, 180, 1), latitude),\n                       ncol = 2, byrow = FALSE)) |&gt;\n    st_sfc(crs = 4326)\n}\n\nget_parallels &lt;- function(spacing = 10) {\n  g &lt;- c()\n  for (lat in seq(-90 + spacing, 90 - spacing, spacing)) {\n    g &lt;- c(g, get_parallel(latitude = lat))\n  }\n  g\n}\n\ngraticule &lt;- c(get_meridians(), get_parallels()) |&gt;\n  st_sfc(crs = 4326) |&gt;\n  # again it must be cut at the Briesemeister breakline\n  st_difference(cut_line) |&gt;\n  st_sfc() |&gt;\n  data.frame() |&gt; \n  st_sf() |&gt;\n  st_transform(bries)\n\n\n\n\nAs it turns out\nAs noted, the published map is differently projected that the one we are making here. To get to the Briesemeister proper we have to stretch our oblique Hammer-Aitoff projection. See\n\nBriesemeister W. 1953. A new oblique equal-area projection. Geographical Review 43(2) 260–261. doi: 10.2307/211940.\n\nfor details. So let’s also do that here (this really is bonus material). We could use the +proj=affine transformation with appropriate settings, but I’ve had issues getting GDAL and tmap to cooperate with pipeline projected data. Instead, we’ll just use the weird matrix post-multiplication of geometries trick that sf allows to apply the required stretch. Unfortunately this does not update the CRS information, making these data layers useless for almost any other purpose.\n\n\nCode\nstretch_mat &lt;- matrix(c(sqrt(7/8), 0, 0, sqrt(8/7)), 2, 2)\ndisc &lt;- disc |&gt;\n  mutate(geometry = geometry * stretch_mat)\nworld &lt;- world |&gt;\n  mutate(geometry = geometry * stretch_mat)\ngraticule &lt;- graticule |&gt;\n  mutate(geometry = geometry * stretch_mat)\n\n# and not forgetting the Springfields...\nspringfields &lt;- st_read(\"all-results-Springfield.geojson\") |&gt;\n  st_transform(bries) |&gt;\n  mutate(geometry = geometry * stretch_mat)\n\n\nFor what it’s worth, all these shenanigans are a good example of why more flexibility in the projection architectures of contemporary platforms would be welcome, something discussed in Chapter 3."
  },
  {
    "objectID": "chapters/chap4/fig4-03-springfields.html#yeah-ok-now-make-a-map-of-all-those-springfields",
    "href": "chapters/chap4/fig4-03-springfields.html#yeah-ok-now-make-a-map-of-all-those-springfields",
    "title": "Figure 4.3 Many Springfields",
    "section": "Yeah, OK, now make a map of all those Springfields",
    "text": "Yeah, OK, now make a map of all those Springfields\n\n\nCode\nggplot() + \n  geom_sf(data = disc, fill = \"#eeeeee\", colour = NA) +\n  geom_sf(data = world, fill = \"white\", colour = NA) +\n  geom_sf(data = springfields, colour = \"red\", size = 0.5) +\n  geom_sf(data = graticule, colour = \"gray\", lwd = 0.15) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap4/questions-4.html",
    "href": "chapters/chap4/questions-4.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by KMJ used under a Creative Commons Attribution-Share Alike 3.0 Unported license\nGiscience wants to know what the heck place even is…\nWhat are the possibilities and limitations of a system of addressing like what3words?1\nWhat might be the pros and cons of the non-hierarchical nature of what3words addressing scheme?\nThink about the neighbourhood you live in. Where does it begin and end?\nHow do you know when you’ve arrived ‘home’?\nDoes the in place/out of place conception of place still apply with respect to graffiti post-Banksy?\nOn pages 106-7 I suggest that atlases and story maps with their narrative tendencies may be better vehicles for conveying a sense of place than more traditionally GIS approaches. Discuss.\nThis prompt probably works best if you collect together a bunch of example atlases and/or story maps to consider.\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap4/questions-4.html#footnotes",
    "href": "chapters/chap4/questions-4.html#footnotes",
    "title": "Discussion questions",
    "section": "References",
    "text": "References\n\n\nNot including providing cute just-so solutions to puzzles in comedy dramas. See this clip from The Outlaws S3↩︎"
  },
  {
    "objectID": "index-listing.html",
    "href": "index-listing.html",
    "title": "All the things",
    "section": "",
    "text": "Use the sort, filter, and categories list to the right to find what you are looking for.\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\n\n\n\n\nLinks for Chapter 1\n\n\n\n\nDiscussion questions\n\n\n\n\nLinks for Chapter 2\n\n\n\n\nDiscussion questions\n\n\n\n\nFigure 2.1 A representation of an absolute space\n\n\n\n\nFigures 2.2 and 2.3 and more on cartograms\n\n\n\n\nFigure 2.4 Two point patterns in absolute space\n\n\n\n\nFigures 2.6 Slivers and gaps in a polygon layer\n\n\n\n\nFigure 2.7 Voronoi polygons associated with a set of point locations\n\n\n\n\nFigure 2.8 Voronoi polygons associated with lines and polygons\n\n\n\n\nFigure 2.9 A range of spatial weights applied to polygon data\n\n\n\n\nLinks for Chapter 3\n\n\n\n\nDiscussion questions\n\n\n\n\nFigure 3.4 Three twenty levels of web map hierarchy\n\n\n\n\nFigure 3.7 Two simple world projections\n\n\n\n\nFigure 3.8 A loxodrome on the sphere and projected\n\n\n\n\nFigure 3.9 Equal area world in a square\n\n\n\n\nFigure 3.10 Raster aggregation and disaggregation\n\n\n\n\nLinks for Chapter 4\n\n\n\n\nDiscussion questions\n\n\n\n\nFigure 4.1 Geohashes and hierarchical indexing\n\n\n\n\nFigure 4.3 Many Springfields\n\n\n\n\nFigure 4.5 Te Reo Māori toponyms in Aotearoa\n\n\n\n\nLinks for Chapter 5\n\n\n\n\nDiscussion questions\n\n\n\n\nFigure 5.1 The 9-intersection model of topological relations\n\n\n\n\nFigure 5.5 Maps of areas with widely varying populations\n\n\n\n\nFigure 5.6 Simple illustration of the modifiable areal unit problem\n\n\n\n\nFigure 5.7 The MAUP aggregation effect\n\n\n\n\nFigure 5.10 Simple regionalization of San Francisco Bay Area\n\n\n\n\nLinks for Chapter 6\n\n\n\n\nDiscussion questions\n\n\n\n\nFigures 6.5 and 6.6 Reduced world city network viewed various ways\n\n\n\n\nFigure 6.7 World trade network communities\n\n\n\n\nFigure 6.10 The small world rewiring process\n\n\n\n\nFigure 6.11 The small world rewiring process in two dimensions\n\n\n\n\nFigure 6.12 A simple graph drawn nine different ways\n\n\n\n\nFigure 6.14 Relative time map of the Santa Barbara street network\n\n\n\n\nLinks for Chapter 7\n\n\n\n\nDiscussion questions\n\n\n\n\nFigures 7.2 and 7.3 Goings on in the space-time aquarium\n\n\n\n\nFigure 7.6 Space-time paths for 100 Beijing taxis\n\n\n\n\nFigure 7.7 Coordination in space-time paths\n\n\n\n\nLinks for Chapter 8\n\n\n\n\nDiscussion questions\n\n\n\n\nFigures 8.1 and 8.2 One-dimensional CA\n\n\n\n\nFigure 8.3 The game of life CA\n\n\n\n\nFigure 8.4 A voter model CA\n\n\n\n\nDiscussion questions\n\n\n\n\n\nNo matching items\n\n\n  \n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap4/fig4-05-te-reo-names.html",
    "href": "chapters/chap4/fig4-05-te-reo-names.html",
    "title": "Figure 4.5 Te Reo Māori toponyms in Aotearoa",
    "section": "",
    "text": "I made an alternative version of this map for some slides. It shows off the little-known multiplication by an affine transform matrix superpower that sf somewhat surprisingly admits (it felt like a cheat-code when I came across it here).\n\n\nCode\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nHere’s the superpower in action where we make an affine rotation matrix and multiply the geometries in the dataset by it. You can use similar operations to translate geometries, although keeping everything lined up can be tricky.\n\n\nCode\nang &lt;- 40 * pi / 180\nrotation &lt;- matrix(c(cos(ang), -sin(ang), \n                     sin(ang),  cos(ang)), 2, 2, byrow = TRUE)\n\nnz &lt;- st_read(\"nz-2193.gpkg\") |&gt;\n  st_cast(\"POLYGON\") |&gt;\n  mutate(geom = geom * rotation)\n\n\nReading layer `nz-2193' from data source \n  `/Users/david/Documents/code/computing-geographically/chapters/chap4/nz-2193.gpkg' \n  using driver `GPKG'\nSimple feature collection with 1 feature and 0 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 1089973 ymin: 4748123 xmax: 2089535 ymax: 6194308\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n\n\nCode\ntoponyms &lt;- st_read(\"placenames.gpkg\") |&gt;\n  mutate(maori = reo &gt; 0) |&gt;\n  mutate(geom = geom * rotation) |&gt;\nst_filter(nz)\n\n\nReading layer `placenames' from data source \n  `/Users/david/Documents/code/computing-geographically/chapters/chap4/placenames.gpkg' \n  using driver `GPKG'\nSimple feature collection with 47417 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 502051.1 ymin: 4460560 xmax: 2239532 ymax: 6638458\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n\n\nAnd now a map with colour choices in large measure dictated by the slides I was making this map for.\n\n\nCode\nggplot() +\n  geom_sf(data = nz, fill = \"#eee8d5\") +\n  geom_sf(data = toponyms |&gt; arrange(id), aes(colour = maori), size = 0.01, alpha = 0.2) +\n  scale_colour_manual(values = c(\"slategrey\", \"red\")) +\n  guides(colour = \"none\") +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"#002b36\"))\n\n\n\n\n\n\n\n\n\nAs noted in the book, the materials for this figure draw on the amazing work of Chris McDowall and Tim Denee in their We Are Here atlas, the Toitū Te Whenua – Land Information New Zealand gazetteer of placenames, and on Te Hiku Media’s Ngā-kupu tools.\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap4/index.html",
    "href": "chapters/chap4/index.html",
    "title": "Chapter 4",
    "section": "",
    "text": "Place and space are in some senses the ‘terrible twins’ of geography. Unlike space, where geographical thought on the matter has been more or less settled for decades, place is a concept that continues to attract attention. Some of the more interesting developments in giscience grapple with this topic seeing potential for a platial giscience (see this conference series) often drawing on the kinds of fuzzy data that can be derived from geotagged social media.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks for Chapter 4\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.1 Geohashes and hierarchical indexing\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.3 Many Springfields\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.5 Te Reo Māori toponyms in Aotearoa\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion questions\n\n\n\nquestions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap4/links-4.html",
    "href": "chapters/chap4/links-4.html",
    "title": "Links for Chapter 4",
    "section": "",
    "text": "Footnote 3\nThe Degree Confluence Project is at confluence.org.\n\n\nFootnote 5\nFind out more about ‘Null Island’ (i.e., 0°N 0°E) at its wikipedia page. A recent blogpost by Alan McConchie will tell you more than you ever wanted to know.\n\n\nFootnote 6\nThe original announcement of geohash is in this blogpost by Greg Niemeyer: blog.labix.org/2008/02/26/geohashorg-is-public. You can generate geohash codes at the website http://geohash.org (yes http, not https).\n\n\nFootnote 7\nGoogle’s S2 index is explained at http://s2geometry.io (yes http, not https).\n\n\nFootnote 8\nUber’s H3 index is described at h3geo.org.\n\n\nFootnote 15\nThe Wire opens with a comment on place, albeit a very big place: America, which is more of an idea than a place. This link might break quickly, but it’s worth your time.\n\n\nFigure 4.2\nThe Bostonography neighborhoods web map is unfortunately no longer working (worth a try, but likely won’t work: bostonography.com/hoods). This blogpost explains the idea, which someone really should revive in other places, as did Hayden Rickard in his Masters thesis, cited in the text and viewable at this link.\n\n\nFigure 4.3\nThe Nominatim geocoder is available at nominatim.openstreetmap.org.\n\n\nFigure 4.5\nChris McDowall’s notes on the te reo Māori placenames map are at github.com/fogonwater/we-are-here. Te Hiku Media’s ngā-kupu tools for detecting Māori words in text are no longer available on their github site. A fork of the repository is on my github site at github.com/DOSull/nga-kupu.\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/fig3-04-webmap-tiles.html",
    "href": "chapters/chap3/fig3-04-webmap-tiles.html",
    "title": "Figure 3.4 Three twenty levels of web map hierarchy",
    "section": "",
    "text": "The code below retrieves an OSM tile from level 0 all the way down to level 19 for the latitude-longitude coordinates of the Broolyn Wind Turbine in Wellington.\n\n\nCode\nlibrary(sf)\nlibrary(dplyr)\nlibrary(stringr)\n\n# adapted from https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#R\ndeg2num&lt;-function(lat_deg, lon_deg, zoom){\n  lat_rad &lt;- lat_deg * pi /180\n  n &lt;- 2.0 ^ zoom\n  xtile &lt;- floor((lon_deg + 180.0) / 360.0 * n)\n  ytile = floor((1 - (log(tan(lat_rad) + (1 / cos(lat_rad))) / pi)) / 2.0 * n)\n  c(xtile, ytile)\n}\n\nlon &lt;- 174.74526\nlat &lt;- -41.31087\n\ntile_names &lt;- c()\nfor (zoom in 0:19) {\n  xy &lt;- deg2num(lat, lon, zoom)\n  tile_name &lt;- str_glue(\"{zoom}/{xy[1]}/{xy[2]}\")\n  tile_names &lt;- c(tile_names, tile_name)\n  osm_tile_url &lt;- str_glue(\"https://tile.openstreetmap.org/{tile_name}.png\")\n  download.file(osm_tile_url, str_glue(\"tiles/{zoom}.png\"), mode = 'wb')\n}\ndf &lt;- data.frame(zoom = 0:19, tile_name = tile_names) |&gt;\n  mutate(left = zoom %% 5, bottom = 3 - zoom %/% 5, \n         right = left + 1, top = bottom + 1)\n\n\nHere they all are (there is probably a better way to do this, but sometimes in R it’s easier just to write the code).\n\n\nCode\nlibrary(png)\n\npar(mai = rep(0, 4))\nplot(1, xlim = c(0, 5), ylim = c(0, 4), xlab = \"\", ylab = \"\", \n     type = \"n\", asp = 1, axes = FALSE)\n\nfor (i in 1:20) {\n  img &lt;- readPNG(str_glue(\"tiles/{df$zoom[i]}.png\"))\n  rasterImage(img, df$left[i], df$bottom[i], df$right[i], df$top[i])\n}\ntext(df$left + 0.01, df$bottom + 0.01, df$tile_name, adj = c(0, 0), cex = 0.75)\n\n\n\n\n\n\n\n\n\nAll tiles © OpenStreetMap contributors, data under the ODbL.\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/fig3-09-tobler-chen.html",
    "href": "chapters/chap3/fig3-09-tobler-chen.html",
    "title": "Figure 3.9 Equal area world in a square",
    "section": "",
    "text": "This equal-area projection could replace Web Mercator as the top level global web tile ‘world in a square’.\nWith astonishing foresight, it was proposed for that purpose in this paper in 1986:\n\nTobler WR and ZT Chen. 1986. A quadtree for global information storage. Geographical Analysis 18(4) 360–371. doi: 10.1111/j.1538-4632.1986.tb00108.x.\n\nGiven the upset that accompanied the Gall-Peters projection, another ‘odd-looking’ equal-area projection (only ‘odd’ because people are so accustomed to Mercator), it’s not clear it would catch on! See this paper for a discussion of that controversy:\n\nCrampton, J. 1994. Cartography’s defining moment: the Peters projection controversy, 1974–1990. Cartographica 31(4) 16–32. doi: 10.3138/1821-6811-L372-345P.\n\nIn any case, this is simply a standard cylindrical equal-area projection with standard parallels chosen to make the whole map area square.\n\n\nCode\nlibrary(sf)\nlibrary(tmap) # for its world dataset\nlibrary(ggplot2)\nlibrary(tmaptools)\nlibrary(dplyr)\n\n\nSet up some theme stuff for the maps.\n\n\nCode\ntheme_set(theme_void())\ntheme_update(\n  plot.margin = unit(c(0, 0, 0, 0), \"pt\"),\n  plot.background = element_rect(fill = \"#ddeeff\"),\n  panel.background = element_rect(fill = NA),\n  panel.border = element_rect(fill = NA, linewidth = 0.5),\n  panel.grid = element_line(colour = \"black\", linewidth = 0.05),\n  panel.ontop = TRUE\n)\n\n\nUse the supplied World dataset (in lat-lon EPSG 4326) and project as required!\n\n\nCode\ndata(\"World\") \nworld_tc &lt;- World |&gt;\n  select(geometry) |&gt;\n  st_transform(\"+proj=cea lat_ts=55.654\")\n\nggplot(world_tc) +\n  geom_sf(fill = \"#aaeecc\", colour = NA) +\n  coord_sf(label_graticule = \"\", expand = FALSE) +\n  scale_x_continuous(breaks = -12:12 * 15) +\n  scale_y_continuous(breaks = -6:6 * 15)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/links-3.html",
    "href": "chapters/chap3/links-3.html",
    "title": "Links for Chapter 3",
    "section": "",
    "text": "Footnote 9\nLewis Carroll’s Sylvie and Bruno Concluded is out of copyright and freely available. See for example, this ebook (the one-to-one map appears in Chapter XI). Unfortunately Borges’s and Eco’s more recent examples are not freely available.\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap3/fig3-07-platte-carre-and-lcea.html",
    "href": "chapters/chap3/fig3-07-platte-carre-and-lcea.html",
    "title": "Figure 3.7 Two simple world projections",
    "section": "",
    "text": "Code\nlibrary(sf)\nlibrary(tmap) # for its world dataset\nlibrary(ggplot2)\nlibrary(tmaptools)\nlibrary(dplyr)\n\n\nSet up some theme stuff for the maps.\n\n\nCode\ntheme_set(theme_void())\ntheme_update(\n  plot.margin = unit(c(0, 0, 0, 0), \"pt\"),\n  plot.background = element_rect(fill = \"#ddeeff\"),\n  panel.background = element_rect(fill = NA),\n  panel.border = element_rect(fill = NA, linewidth = 0.5),\n  panel.grid = element_line(colour = \"black\", linewidth = 0.05),\n  panel.ontop = TRUE\n)\n\n\nUse the supplied World dataset (in lat-lon EPSG 4326) and make projections as required.\n\n\nCode\ndata(\"World\") \nworld &lt;- World |&gt;\n  select(geometry)\n\n# Equal area with standard parallel at 0\nworld_lcea &lt;- world |&gt;\n  st_transform(\"+proj=cea\")\n\n\nThat’s pretty much it. So here are the maps.\n\n\nCode\nggplot(world) +\n  geom_sf(fill = \"#aaeecc\", colour = NA) +\n  coord_sf(label_graticule = \"\", expand = FALSE) +\n  scale_x_continuous(breaks = -12:12 * 15) +\n  scale_y_continuous(breaks = -6:6 * 15)\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(world_lcea) +\n  geom_sf(fill = \"#aaeecc\", colour = NA) +\n  coord_sf(label_graticule = \"\", expand = FALSE) +\n  scale_x_continuous(breaks = -12:12 * 15) +\n  scale_y_continuous(breaks = -6:6 * 15)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/fig2-02-cartograms.html",
    "href": "chapters/chap2/fig2-02-cartograms.html",
    "title": "Figures 2.2 and 2.3 and more on cartograms",
    "section": "",
    "text": "The cartograms in Figure 2.2 were made using ScapeToad (linked here). They are examples of Gastner-Newman cartograms, popularised by Danny Dorling at the World Mapper website. I’m not really in love with this style of cartogram, although I do appreciate the impact they’ve had in making the notion of cartograms more widely known. Furthermore, there aren’t many other cartogram styles that have been automated even to the limited extent that this one has.\nThe broader point, made several times in the book is the arbitrary nature of the preference for geodetic accuracy in map projections.It would be preferable if standard geospatial platforms could support any mapping of geocentric (latitude-longitude) coordinates to other two dimensional coordinate systems, as defined by end-users. For more on this, see\nIn fact, the machinery to do so exists in most GIS in the tools used to georeference imagery. However, these tools typically only enable warping inputs so that they conform with already known coordinate reference systems, although the underlying mathematics of mapping points between two coordinate systems could in principle allow user-defined coordinates, with potential benefits for the exploration of multiple geographies.\nAn example of this is shown below, again an Aotearoa New Zealand population cartogram.\nHowever, this example was produced in an unusual way. I first used ScapeToad to make a population-based cartogram, but at the same time transformed a set of hex-grid points. This gives me a set of mappings of coordinate pairs in a geodetic coordinate space (in this case New Zealand Transverse Mercator NZTM), and the corresponding coordinate locations in ‘population cartogram space’. Using these it is possible to interpolate any points in NZTM coordinates into the cartogram coordinate space. The mapping is the same information that is provided by ScapeToad’s transformation grid (pictured in Figure 2.3 in the book), but with more detail.\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/fig2-02-cartograms.html#making-a-cartogram-the-complicated-but-reusable-way",
    "href": "chapters/chap2/fig2-02-cartograms.html#making-a-cartogram-the-complicated-but-reusable-way",
    "title": "Figures 2.2 and 2.3 and more on cartograms",
    "section": "Making a cartogram the complicated (but reusable) way",
    "text": "Making a cartogram the complicated (but reusable) way\nHere’s some R code that does all this in a very rough and ready way using a triangulation-based interpolator from the akima package. I say more at the end of the page about embedding this approach in GIS.\nFirst we read in a New Zealand coastline polygon, which we are going to transform, hex grid centres in NZTM, and the same hex grid centres transformed by ScapeToad based on a population cartogram.\n\n\nCode\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(akima)\nlibrary(knitr)\n\nnz &lt;- st_read(\"nz.gpkg\")\nhex_pts &lt;- st_read(\"hex-centres.gpkg\")\nhex_pts_carto &lt;- st_read(\"hex-centres-carto.gpkg\") |&gt;\n  st_set_crs(st_crs(hex_pts))\n\n\nAnd here is a map of the three layers.\n\n\nCode\nggplot(hex_pts) +\n  geom_sf(size = 0.0001) +\n  geom_sf(data = hex_pts_carto, colour = \"red\", size = 0.0001) +\n  geom_sf(data = nz, colour = \"blue\", fill = \"#00000000\") +\n  theme_void()\n\n\n\n\n\n\n\n\n\nThe black dots are the hex grid centres in NZTM, and the red dots are where they ended up when transformed according to the population cartogram."
  },
  {
    "objectID": "chapters/chap2/fig2-02-cartograms.html#build-a-transformation-table",
    "href": "chapters/chap2/fig2-02-cartograms.html#build-a-transformation-table",
    "title": "Figures 2.2 and 2.3 and more on cartograms",
    "section": "Build a transformation table",
    "text": "Build a transformation table\nNext we build a ‘transformation’ table with the \\((x_1, y_1)\\) and \\((x_2, y_2)\\) pairs of corresponding coordinate pairs in the NZTM and population cartogram spaces.\n\n\nCode\nx1y1 &lt;- hex_pts |&gt;\n  st_coordinates() |&gt;\n  as_tibble() |&gt;\n  select(1:2) |&gt; \n  rename(x1 = X, y1 = Y)\n\nx2y2 &lt;- hex_pts_carto |&gt;\n  st_coordinates() |&gt;\n  as_tibble() |&gt;\n  select(1:2) |&gt; \n  rename(x2 = X, y2 = Y)\n\ntransform &lt;- bind_cols(x1y1, x2y2)\n\n\nHere is what that looks like:\n\n\nCode\nkable(head(transform), format = \"html\")\n\n\n\n\n\nx1\ny1\nx2\ny2\n\n\n\n\n1084975\n4896329\n1145278\n4920257\n\n\n1084975\n4913650\n1148380\n4929528\n\n\n1089975\n4887669\n1150074\n4918234\n\n\n1089975\n4904989\n1156816\n4927015\n\n\n1089975\n4922310\n1157860\n4934749\n\n\n1094975\n4879009\n1151653\n4914431\n\n\n\n\n\n\n\n\nThe points to be transformed\nThe simple interpolator we are using can only transform points, so we convert the coastline data to points.\n\n\nCode\nnz_coast_pts &lt;- nz |&gt;\n  st_cast(\"MULTIPOINT\") |&gt;\n  st_coordinates() |&gt;\n  as_tibble() |&gt;\n  select(1:2) |&gt;\n  rename(x = X, y = Y)"
  },
  {
    "objectID": "chapters/chap2/fig2-02-cartograms.html#the-interpolation",
    "href": "chapters/chap2/fig2-02-cartograms.html#the-interpolation",
    "title": "Figures 2.2 and 2.3 and more on cartograms",
    "section": "The interpolation",
    "text": "The interpolation\nEach coordinate (i.e. \\(x\\) and \\(y\\)) is separately interpolated. The interpolator is provided with the \\((x, y, z)\\) information from the transform dataframe which for the \\(x\\) coordinate are \\((x_1, y_1, x_2)\\) and for the \\(y\\) coordinate \\((x_1, y_1, y_2)\\). What is done with these data is that the input \\((x_1, y_1)\\) coordinates are triangulated giving in effect a triangulated irregular network surface for each coordinate in NZTM (map) space. Any point inside a given triangle can then have its coordinate in the transformed cartogram space interpolated from the known coordinate values in that space at the vertices of its triangle.\nAnyway, using akima::interpp here is how we can do that.\n\n\nCode\nnz_coast_carto_x &lt;- interpp(\n  x = transform$x1, y = transform$y1, z = transform$x2,\n  xo = nz_coast_pts$x, yo = nz_coast_pts$y)$z\nnz_coast_carto_y &lt;- interpp(\n  x = transform$x1, y = transform$y1, z = transform$y2,\n  xo = nz_coast_pts$x, yo = nz_coast_pts$y)$z\n\n\nThen we make these up into a spatial dataframe, and map them. The original coast outline is in blue, the transformed coast points in red.\n\n\nCode\nnz_coast_carto &lt;- tibble(x = nz_coast_carto_x, \n                         y = nz_coast_carto_y) |&gt;\n  st_as_sf(coords = c(\"x\", \"y\"), crs = 2193)\n\nggplot(nz) +\n  geom_sf(colour = \"blue\", fill = \"#00000000\") +\n  geom_sf(data = nz_coast_carto, colour = \"red\", size = 0.0001) +\n  theme_void()"
  },
  {
    "objectID": "chapters/chap2/fig2-02-cartograms.html#embedding-this-in-gis",
    "href": "chapters/chap2/fig2-02-cartograms.html#embedding-this-in-gis",
    "title": "Figures 2.2 and 2.3 and more on cartograms",
    "section": "Embedding this in GIS",
    "text": "Embedding this in GIS\nClearly the above example is not entirely satisfactory. It can only transform points and a lot of additional code would be required to add that capability. In principle however, it is not difficult to include this capability in GIS or other standard platforms, using capabilities already present in the proj tools for coordinate transformation that underpin today’s geospatial software. This is something Luke Bergmann and I have been exploring for a while.\nSpecifically proj‘s tinshift transformation provides for exactly the transformation carried out above. It requires a JSON file with the triangulation information precomputed. That’s how I made the example at the top of this page. With a ’tinshift’ JSON file, the following GDAL command line will carry out the required transformation between NZTM and a population cartogram based on 2018 census data:\nogr2ogr -skipfailures -ct \"+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=tinshift +file=tinshift.json +step +proj=axisswap +order=2,1\" &lt;output GPKG&gt; &lt;input GPKG&gt;\nUnfortunately, for reasons we don’t fully understand the additional axisswap transformation is required, either side of the tinshift operation requiring a projection ‘pipeline’ to be used. The -skipfailures option prevents the command failing completely if a polygon becomes invalid as a result of the transformation.\nHere’s a JSON file for the New Zealand population cartogram, if you want to try it for yourself.\nThis might not be the most elegant way to project any geospatial data into a cartogram space, but it is already available in existing tools!\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap2/questions-2.html",
    "href": "chapters/chap2/questions-2.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by Thomas Oboe Lee used under a Creative Commons Attribution-Share Alike 4.0 International license\nAs this chapter argues, the nature of space is fundamental to geography and to giscience.\nIf not the geoatom then what?\nIt’s all very well criticising geoatoms as a basis for computing geographically. What other approach would be better?\nIs the ‘raster-vector debate’ really the damp squib I suggest?\nSpecifically on page 27, I suggest that\nDo you agree? Or do you think there’s something to Helen Couclelis’s contention1 that these two perspectives align with the longstanding ontological question of\nSo if spatial analysis represents space relationally, does it really matter if GIS tools do not?\nThis question opens up a can of worms that has troubled giscience since… well… since forever.2 Such concerns go right to the heart of how giscience qua science is meaningfully distinct from geographical information systems. Indeed spatial analysis is arguably not one but two (‘spatial statistics’ and ‘analytical tools’) of the eight topic headings listed in the ‘founding document’ of giscience.3\nWhich of the prospectively relative or relational approaches to representing geographical data described on pages 33-43 seem most promising?\nAnd a follow up question: do any of them seem likely to become cornerstones of widely used platforms? If so, which ones, and if not, why not?\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/questions-2.html#footnotes",
    "href": "chapters/chap2/questions-2.html#footnotes",
    "title": "Discussion questions",
    "section": "References",
    "text": "References\n\n\nCouclelis H. 1992. People manipulate objects (but cultivate fields): Beyond the raster-vector debate in GIS. In AU Frank, I Campari, and U Formentini (eds) Theories and Methods of Spatio-Temporal Reasoning in Geographic Space, pages 65–77. Lecture Notes in Computer Science 639. Springer.↩︎\nGoodchild MF and R Haining. 1992. Integrating GIS and spatial data analysis: problems and possibilities. International Journal of Geographical Information Systems 6 407–423.↩︎\nGoodchild MF. 1992. Geographical information science. International Journal of Geographical Information Systems 6(1) 31–45.↩︎"
  },
  {
    "objectID": "chapters/chap2/index.html",
    "href": "chapters/chap2/index.html",
    "title": "Chapter 2",
    "section": "",
    "text": "The book proper starts with a look at what many consider geography’s key distinctive focus, namely space. This is often, in more GIS-adjacent settings understood as location, which led me directly to Whitehead’s arresting dismissal of simple location as an idea, something to which we return in Chapter 8. This chapter considers geographical theories about space and how space is—and potentially could be—represented in giscience. Many of the figures relate to some of the more interesting ways in which giscience represents space.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks for Chapter 2\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.1 A representation of an absolute space\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigures 2.2 and 2.3 and more on cartograms\n\n\n\ncode\n\n\nR\n\n\nextra\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.4 Two point patterns in absolute space\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigures 2.6 Slivers and gaps in a polygon layer\n\n\n\ncode\n\n\nR\n\n\nextra\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.7 Voronoi polygons associated with a set of point locations\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.8 Voronoi polygons associated with lines and polygons\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.9 A range of spatial weights applied to polygon data\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion questions\n\n\n\nquestions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/links-2.html",
    "href": "chapters/chap2/links-2.html",
    "title": "Links for Chapter 2",
    "section": "",
    "text": "Footnote 1\nAs marketing copy, this one is always already out of date. As of November 2023, the most direct reference to location on the Esri website is here: esri.com/en-us/arcgis/products/spatial-analytics-data-science/overview, where the first subheading reads Location reveals hidden patterns and relationships.\n\n\nFootnote 6\nScapeToad is still at http://scapetoad.choros.place/ (yes http, not https).\n\n\nFootnote 8\nThe TopoJSON format specification is at github.com/topojson/topojson-specification.\n\n\nFootnote 9\nThe GeoJSON format specification is at datatracker.ietf.org/doc/html/rfc7946\n\n\nFootnote 10\nYou can experiment with the GeoJSON format at geojson.io.\n\n\nFootnote 11\nDavid Theobald’s bewildered comment about the rendering speed of shapefiles is in an article in ArcUser entitled ‘Understanding topology and shapefiles’: esri.com/news/arcuser/0401/topo.html.\n\n\nFootnote 14\nThe PostGIS project home page: osgeo.org/projects/postgis/\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap2/fig2-01-absolute-space.html",
    "href": "chapters/chap2/fig2-01-absolute-space.html",
    "title": "Figure 2.1 A representation of an absolute space",
    "section": "",
    "text": "A simple visualisation of geo-atoms in absolute space\n\n\nCode\nlibrary(plot3D)\nlibrary(dplyr)\n\n\nThere isn’t a lot to this. Just make a bunch of random numbers…\n\n\nCode\ndata &lt;- data.frame(x = rnorm(30), y = rnorm(30), z = rnorm(30))\n\n\n… and plot them.\n\n\nCode\nscatter3D(x = data$x, y = data$y, z = data$z, \n          theta = 25, phi = 30, scale = FALSE, \n          xlim = range(data$x) * 1.1, \n          ylim = range(data$y) * 1.1, \n          zlim = range(data$z) * 1.1, \n          pch = 19, col = \"#999999\", bty = \"u\", type = \"h\", \n          asp = 1, col.axis = \"#333333\", col.panel = \"#eeeeee\", \n          col.grid = \"#666666\", lwd.grid = 0.2, nticks = 6)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/fig5-07-maup-aggregation.html",
    "href": "chapters/chap5/fig5-07-maup-aggregation.html",
    "title": "Figure 5.7 The MAUP aggregation effect",
    "section": "",
    "text": "This page produces a coloured version of Figure 5.7 which may be a little easier to read. It also uses standard deviation ellipses to make things a bit clearer (I hope).\nCode\nlibrary(MASS)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(colorspace)\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/fig5-07-maup-aggregation.html#data",
    "href": "chapters/chap5/fig5-07-maup-aggregation.html#data",
    "title": "Figure 5.7 The MAUP aggregation effect",
    "section": "Data",
    "text": "Data\n\nMake a correlated dataset\nUsing the MASS::mvrnorm() function we can create a dataframe with x and y variables with some requested correlation. We also reorder by the sum of the two variables (in effect from lower-left to upper-right), and number the observations on that basis. This allows us to aggregate observations that are broadly similar or broadly different.\n\n\nCode\nget_correlated_df &lt;- function(cor = 0.5) {\n  # generate a multivariate normal distribution\n  # mu is the mean centre, Sigma is the covariance matrix\n  mvrnorm(n = 1024, mu = c(5, 5), \n          Sigma = matrix(c(1, cor, cor, 1), 2, 2)) |&gt;\n    as.data.frame() |&gt;\n    rename(x = V1, y = V2) |&gt;\n    arrange(x + y) |&gt; \n    mutate(id = row_number())\n}\n\n\n\n\nAggregator functions\nNext two functions that aggregate either similar or different observations. This is a fairly crude approach but it works. agg_similar() uses integer division to create a ‘grouper’ variable that goes eight 0s, then eight 1s, then eight 2s, and so on up to eight 127s. When group_by is applied using this variable, sets of 8 similar observations are aggregated and the mean taken to give a new dataset.\nConversely, if the grouper variable is based on the remainder from division by 128, we get 8 sequences of 0, 1, 2, 3,… 127, and when these are aggregated into groups, each will consist of eight observations at widely separated positions in the sequence (i.e., with very different values).\n\n\nCode\n# aggregate similar observations\nagg_similar &lt;- function(df) {\n  df |&gt;\n    mutate(grouper = id %/% 8) |&gt;\n    group_by(grouper) |&gt;\n    summarise(x = mean(x), \n              y = mean(y)) |&gt;\n    dplyr::select(-grouper) |&gt;\n    ungroup()\n}\n\n# aggregate different observations\nagg_different &lt;- function(df) {\n  df |&gt;\n    mutate(grouper = id %% 128) |&gt;\n    group_by(grouper) |&gt;\n    summarise(x = mean(x), \n              y = mean(y)) |&gt;\n    dplyr::select(-grouper) |&gt;\n    ungroup()\n}"
  },
  {
    "objectID": "chapters/chap5/fig5-07-maup-aggregation.html#plotting-functions",
    "href": "chapters/chap5/fig5-07-maup-aggregation.html#plotting-functions",
    "title": "Figure 5.7 The MAUP aggregation effect",
    "section": "Plotting functions",
    "text": "Plotting functions\nWe also make some plotting functions so we don’t have to repeat a lot of code. These add three plots based on a dataset. A scatterplot of the points, a standard deviation ellipse, and a best fit line. This will make sense when you see the plots.\n\n\nCode\nadd_ellipses &lt;- function(g, dfs, cols, alphas, filled_polygons) {\n  for (i in seq_along(dfs)) {\n    if (filled_polygons[i]) {\n      g &lt;- g + stat_ellipse(\n                 data = dfs[[i]], aes(x = x, y = y), geom = \"polygon\", \n                 alpha = alphas[i], fill = cols[i])\n    } else {\n      g &lt;- g + stat_ellipse(\n                 data = dfs[[i]], aes(x = x, y = y), colour = cols[i], \n                 linewidth = 0.35)\n    }\n  }\n  g\n}\n\nadd_points &lt;- function(g, dfs, cols, alphas) {\n  for (i in seq_along(dfs)) {\n    g &lt;- g + geom_point(data = dfs[[i]], aes(x = x, y = y), \n               colour = cols[i], alpha = alphas[i], pch = 16, size = 1)\n  }\n  g\n}\n\nadd_lines &lt;- function(g, dfs, cols) {\n  for (i in seq_along(dfs)) {\n    g &lt;- g + geom_smooth(data = dfs[[i]], aes(x = x, y = y), method = lm,\n               se = FALSE, colour = darken(cols[i]), linewidth = 0.75)\n  }\n  g\n}\n\nthree_plots &lt;- function(dfs, cols = c(\"black\", \"forestgreen\", \"magenta\")) {\n  g &lt;- ggplot()\n  g &lt;- add_ellipses(g, dfs, cols, alpha = rep(0.25, 3), filled_polygons = c(F, T, T))\n  g &lt;- add_points(g, dfs, cols, alphas = c(0.2, 0.5, 0.5))\n  g &lt;- add_lines(g, dfs, cols)\n  g + \n    coord_equal() + \n    theme_void()\n}"
  },
  {
    "objectID": "chapters/chap5/fig5-07-maup-aggregation.html#finally-the-plots",
    "href": "chapters/chap5/fig5-07-maup-aggregation.html#finally-the-plots",
    "title": "Figure 5.7 The MAUP aggregation effect",
    "section": "Finally the plots",
    "text": "Finally the plots\nSo now make some datsets and see what we get.\nFirst a dataset with approximate correlation between x and y of 0.5. We then aggregate it two ways and plot the results.\n\n\nCode\ndf &lt;- get_correlated_df(0.5)\ndf_sim &lt;- df |&gt;\n  agg_similar()\ndf_diff &lt;- df |&gt;\n  agg_different()\n\nthree_plots(list(df, df_sim, df_diff))\n\n\n\n\n\n\n\n\n\nWhen we aggregate similar observations (the green ellipse) the correlation is increased, while aggregating different observations inverts the correlation (the violet ellipse)! The initial correlation is seen in the unfilled black ellipse.\nThe effect is even more remarkable for uncorrelated data:\n\n\nCode\ndf &lt;- get_correlated_df(0)\ndf_sim &lt;- df |&gt;\n  agg_similar()\ndf_diff &lt;- df |&gt;\n  agg_different()\n\nthree_plots(list(df, df_sim, df_diff))\n\n\n\n\n\n\n\n\n\nWhat do we take from this in a geographical setting? Well, if indeed “near things are more related than distant things”, then in many situations where data are aggregated spatially based on proximity positive correlations are likely to be ‘enhanced’, and we may even see correlations where none exist at the individual level.\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap5/questions-5.html",
    "href": "chapters/chap5/questions-5.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by BeŻet used under a Creative Commons Attribution-Share Alike 4.0 International license\n\n\n\nAre maps really just a bunch of lines on a page screen?!\n\nConsidering examples discussed in this chapter (e.g.,airports) or other examples of ‘strange’ geographies, what changes to standard ways of representing areas on maps or in data might these call for?\n\nWhat are the implications of adopting Smith’s approach to spatial data where areas cannot overlap?\nWhen would such an approach break down?\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/fig5-05-ca-pop-maps.html",
    "href": "chapters/chap5/fig5-05-ca-pop-maps.html",
    "title": "Figure 5.5 Maps of areas with widely varying populations",
    "section": "",
    "text": "Not too much to say here, except that it would be nice if somebody would develop a better approach to mapping US-wide data. Counties really are a terrible base unit. Augmenting the data with population density helps a little…\n\n\nCode\nlibrary(sf)\nlibrary(tmap)\nlibrary(cols4all)\nlibrary(dplyr)\n\nca &lt;- st_read(\"ca-pops.gpkg\") |&gt;\n  mutate(area = st_area(geom), \n         pop_density = population / area * 1000000)\n\n\nAn opportunity here to get acquainted with the new semantics of tmap version 4…\n\n\nCode\nm1 &lt;- tm_shape(ca) + \n  tm_polygons(\n    fill = \"population\", col = \"white\", lwd = 0.5,\n    fill.scale = tm_scale_intervals(values = \"brewer.reds\", \n                                    style = \"pretty\"),\n    fill.legend = tm_legend(title = \"Population\", \n                            position = c(0.53, 0.8))) + \n  tm_layout(frame = FALSE, legend.frame = FALSE)\n  \nm2 &lt;- tm_shape(ca) + \n  tm_polygons(\n    fill = \"pop_density\", col = \"white\", lwd = 0.5,\n    fill.scale = tm_scale_intervals(values = \"brewer.greens\",\n                                    style = \"pretty\"),\n    fill.legend = tm_legend(title = \"Pop density\", \n                            position = c(0.53, 0.8))) + \n  tm_layout(frame = FALSE, legend.frame = FALSE)\n\nm3 &lt;- tm_shape(ca) + \n  tm_polygons(\n    fill = \"pop_density\", col = \"white\", lwd = 0.5,\n    fill.scale = tm_scale_intervals(values = \"brewer.blues\", \n                                    style = \"log10_pretty\"),\n    fill.legend = tm_legend(title = \"Pop density\", \n                            position = c(0.53, 0.8))) + \n  tm_layout(frame = FALSE, legend.frame = FALSE)\n  \ntmap_arrange(m1, m2, m3)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/fig5-10-san-fran-clusters.html",
    "href": "chapters/chap5/fig5-10-san-fran-clusters.html",
    "title": "Figure 5.10 Simple regionalization of San Francisco Bay Area",
    "section": "",
    "text": "This page produces a coloured version of Figure 5.10 which is easier to read (but may not show the same clusters).\nCode\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(ggpattern)\nlibrary(cols4all)\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap5/fig5-10-san-fran-clusters.html#data",
    "href": "chapters/chap5/fig5-10-san-fran-clusters.html#data",
    "title": "Figure 5.10 Simple regionalization of San Francisco Bay Area",
    "section": "Data",
    "text": "Data\nThe data are as used in Luc Guillemot’s website example.\n\n\nCode\nsf_demog &lt;- st_read(\"sf_clustering_data.gpkg\")\n\n\n\nData cleanup\nThere are some NA data which we will show as hatched areas using the ggpattern package so some work is required on that.\n\n\nCode\nnas &lt;- sf_demog |&gt;\n  st_union() |&gt;\n  st_difference(sf_demog |&gt; \n  drop_na() |&gt; \n  st_union())"
  },
  {
    "objectID": "chapters/chap5/fig5-10-san-fran-clusters.html#run-the-clustering",
    "href": "chapters/chap5/fig5-10-san-fran-clusters.html#run-the-clustering",
    "title": "Figure 5.10 Simple regionalization of San Francisco Bay Area",
    "section": "Run the clustering",
    "text": "Run the clustering\nk-means clustering in R using the base kmeans function is straightforward, but requires a non-spatial version of the dataset. We also remove the ID columns and the cluster assignment from the data (since we don’t want to do clustering and include a variable that already designates a cluster).\n\n\nCode\nsf_demog &lt;- sf_demog |&gt;\n  drop_na()\n\nsf_demog.d &lt;- sf_demog |&gt;\n  st_drop_geometry() |&gt;\n  select(-(1:2), -cluster)\n\nkm &lt;- kmeans(sf_demog.d, centers = 9)\n\n\nNext we append the cluster result to the original spatial dataset so we can map it.\n\n\nCode\nsf_demog$k9 &lt;- km$cluster |&gt; as.factor()\n\nggplot(nas) + \n  geom_sf_pattern(fill = \"white\", lwd = 0, \n                  pattern_fill = \"black\", pattern_density = 0.04, \n                  pattern_angle = 45, pattern_spacing = 0.012) + \n  geom_sf(data = sf_demog, aes(fill = k9)) +\n  scale_fill_brewer(palette = \"Paired\") +\n  guides(fill = \"none\") +\n  coord_sf(xlim = c(1.82e6, 1.87e6), ylim = c(6.3e5, 6.6e5)) +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"#cceeff\"))\n\n\n\n\n\n\n\n\n\nAnd for comparison, below is the regionalization from Luc Guillemot’s more complex clustering method. The colours don’t match up (they are just colours!) but you can see that the overall regionalisation result is broadly similar, even though we have requested only 9 clusters from the k-means analysis.\n\n\nCode\nggplot(nas) + \n  geom_sf_pattern(fill = \"white\", lwd = 0, \n                  pattern_fill = \"black\", pattern_density = 0.04, \n                  pattern_angle = 45, pattern_spacing = 0.012) + \n  geom_sf(data = sf_demog, aes(fill = as.factor(cluster))) +\n  scale_fill_discrete_c4a_cat(palette = \"20\") +\n  guides(fill = \"none\") +\n  coord_sf(xlim = c(1.82e6, 1.87e6), ylim = c(6.3e5, 6.6e5)) +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"#cceeff\"))\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap9/index.html",
    "href": "chapters/chap9/index.html",
    "title": "Chapter 9",
    "section": "",
    "text": "Finally, a (very) modest proposal—more of a plea really—that we all pay more attention to each other’s work and perspectives, and take seriously the idea that giscience is geographical in how we educate both ‘GISers’ and geographers.\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap7/fig7-02-7-03-tg-aquarium.html",
    "href": "chapters/chap7/fig7-02-7-03-tg-aquarium.html",
    "title": "Figures 7.2 and 7.3 Goings on in the space-time aquarium",
    "section": "",
    "text": "To make spacetime lines we need 3D plotting capability, for which I used plot3D and plotly.\n\n\nCode\nlibrary(dplyr)\nlibrary(plot3D)\n\n\nI also jerry-rigged a simple CSV file format, which looks like the dataframe below.\n\n\nCode\ntime_space_data &lt;- read.csv(\"tg-day-in-the-life.csv\")\nlocations_0 &lt;- unique(select(time_space_data, x, y)) |&gt;\n  mutate(id = 1:5, t = 0)\n\nlocations_24 &lt;- locations_0 |&gt;\n  mutate(t = 24)\n\nknitr::kable(time_space_data |&gt; head())\n\n\n\n\n\nx\ny\nt\n\n\n\n\n5\n5\n0.00\n\n\n5\n5\n7.50\n\n\n16\n20\n8.25\n\n\n16\n20\n12.50\n\n\n14\n18\n12.60\n\n\n14\n18\n13.40\n\n\n\n\n\nNot tremendously interesting, but you can imagine additional attributes describing what each \\((x,y,t)\\) triple is and before you know it you’ll be dealing in geotemporal atoms, although… the instantaneity implied in this representation would be rather questionable. However, the point here isn’t to invent a geotemporal information system, just to make some spacetime plots, so…\nThe plot3D functions aren’t the most straightforward to use, but after some experimentation I came up with the following two pictures. First… a classic ‘day in the life’ plot.\n\n\nCode\nlines3D(time_space_data$x, time_space_data$y, time_space_data$t, \n        xlim = c(min(time_space_data$x) - 2, \n                 max(time_space_data$x) + 2),\n        ylim = c(min(time_space_data$y) - 2, \n                 max(time_space_data$y) + 2),\n        xlab = \"x\", ylab = \"y\", zlab = \"Time, t\",\n        col = \"#00000080\", lwd = 2, alpha = 0.5, \n        phi = 25, theta = 60, bty = \"g\", scale = FALSE)\n\npoints3D(locations_0$x, locations_0$y, locations_0$t, \n         add = TRUE, col = \"black\")\n\narrows3D(locations_0$x, locations_0$y, locations_0$t, \n         locations_24$x, locations_24$y, locations_24$t, \n         add = TRUE, lty = \"dashed\", lwd = 0.5, col = \"black\")\n\n\n\n\n\n\n\n\n\nAnd second, a ‘meeting’ plot, where a collection of meeting participants converge into a ‘bundle’ in one place over a period of time.\n\n\nCode\ntime_space_data &lt;- read.csv(\"tg-meeting.csv\")\n\ntrace &lt;- time_space_data |&gt; \n  filter(id == 1)\n\nlines3D(trace$x, trace$y, trace$t, \n        xlim = c(-6, 6), ylim = c(-6, 6),\n        xlab = \"x\", ylab = \"y\", zlab = \"Time, t\",\n        col = \"black\", lwd = 1, phi = 25, theta = 60, \n        bty = \"g\", scale = FALSE)\n\nfor (i in 2:8) {\n  trace &lt;- time_space_data |&gt; filter(id == i)\n  lines3D(trace$x, trace$y, trace$t, add = TRUE,\n          xlim = c(-6, 6), ylim = c(-6, 6),\n          col = \"black\", lwd = 1)\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap7/index.html",
    "href": "chapters/chap7/index.html",
    "title": "Chapter 7",
    "section": "",
    "text": "If space and place are geography’s in-house terrible twins then time is its estranged first cousin. The notion of a space-time-attribute hyperspace wherein geography examines fixed time slices, while history focuses on fixed localities over time is firmly embedded in giscience given its origins in automated cartography and the snapshot view of the world implicit in maps. Time geography offers a possible escape from this impasse, and is central to both human dynamics and mobilities perspectives, although those two subfields of contemporary geography remain frustratingly distant from one another.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks for Chapter 7\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigures 7.2 and 7.3 Goings on in the space-time aquarium\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7.6 Space-time paths for 100 Beijing taxis\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7.7 Coordination in space-time paths\n\n\n\nfigures\n\n\ncode\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion questions\n\n\n\nquestions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap7/links-7.html",
    "href": "chapters/chap7/links-7.html",
    "title": "Links for Chapter 7",
    "section": "",
    "text": "Footnote 2\nThe ‘timebliography’ of representations of time in giscience is no longer available. Unfortunately the Internet Archive snapshots of it are not very useful due to the interactive nature of the site. You’ll have to make do with reading the paper referenced in the book!\n\n\nFigure 7.6\nThe taxi trajectory dataset is available at microsoft.com/en-us/research/publication/t-drive-trajectory-data-sample.\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/fig6-14-sb-drive-time.html",
    "href": "chapters/chap6/fig6-14-sb-drive-time.html",
    "title": "Figure 6.14 Relative time map of the Santa Barbara street network",
    "section": "",
    "text": "This started out as the notebook developed by Geoff Boeing available here although by now it has been very heavily modified!\nI was lucky enough to co-advise Geoff as a PhD student at Berkeley, and when he announced that he was going to build osmnx as part of his project—only a part, mind!—I did the proper thing and expressed concern that he was being overly ambitious. PhD advising is mostly about steering students towards the possible, and reining in their wilder ideas… at least that is the common wisdom. So much for that: Geoff built it and the rest is (niche) history.\n[If I have one criticism of osmnx it is that the code gets updated so often that function names are subject to rapid change. You may find that some of what follows doesn’t work in more recent versions than 1.6.0.]\nAnyway… as usual we need some libraries:\n\n\nCode\nimport math\nimport geopandas\nimport matplotlib.pyplot as plt\nimport networkx\nimport igraph\nimport osmnx\nfrom shapely.geometry import Point\n\nosmnx.settings.log_console = True\nosmnx.settings.use_cache = True\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/fig6-14-sb-drive-time.html#travel-time-based-reprojection-of-a-network",
    "href": "chapters/chap6/fig6-14-sb-drive-time.html#travel-time-based-reprojection-of-a-network",
    "title": "Figure 6.14 Relative time map of the Santa Barbara street network",
    "section": "",
    "text": "This started out as the notebook developed by Geoff Boeing available here although by now it has been very heavily modified!\nI was lucky enough to co-advise Geoff as a PhD student at Berkeley, and when he announced that he was going to build osmnx as part of his project—only a part, mind!—I did the proper thing and expressed concern that he was being overly ambitious. PhD advising is mostly about steering students towards the possible, and reining in their wilder ideas… at least that is the common wisdom. So much for that: Geoff built it and the rest is (niche) history.\n[If I have one criticism of osmnx it is that the code gets updated so often that function names are subject to rapid change. You may find that some of what follows doesn’t work in more recent versions than 1.6.0.]\nAnyway… as usual we need some libraries:\n\n\nCode\nimport math\nimport geopandas\nimport matplotlib.pyplot as plt\nimport networkx\nimport igraph\nimport osmnx\nfrom shapely.geometry import Point\n\nosmnx.settings.log_console = True\nosmnx.settings.use_cache = True"
  },
  {
    "objectID": "chapters/chap6/fig6-14-sb-drive-time.html#download-and-prep-the-street-network",
    "href": "chapters/chap6/fig6-14-sb-drive-time.html#download-and-prep-the-street-network",
    "title": "Figure 6.14 Relative time map of the Santa Barbara street network",
    "section": "Download and prep the street network",
    "text": "Download and prep the street network\nWhat osmnx excels at is pulling (generally messy) street network data and cleaning it up for analysis. Here’s how it works:\n\n\nCode\n# configure the place, network type, trip times, and travel speed\nplace = \"Santa Barbara, California\"\nnetwork_type = \"drive\"\n\nG = osmnx.graph_from_place(place, network_type = network_type)\n\n\nThe network needs to be connected for any of the following to work reliably, so we extract the largest component and throw away everything else. I can’t vouch for this being the best way to accomplish this, but it seems to work.\n\n\nCode\nG = G.to_undirected() # required for extraction of giant component\n\nGcc = sorted(networkx.connected_components(G), key = len, reverse = True)\nG = G.subgraph(Gcc[0]).copy()\n\n\n\nSome geography stuff…\nThis line will project the data to an appropriate UTM projection, and then we can make an appropriately UTM projected geopandas.GeoDataFrame.\n\n\nCode\nG = osmnx.project_graph(G)\ngdf_nodes = osmnx.graph_to_gdfs(G, edges = False)\nCRS = gdf_nodes.crs\n\n\nNext we make a convex hull of the nodes, and determine its centroid, then use this to find the node nearest the centroid. We also make a simple GeoSeries so we can check what we’ve done makes sense.\n\n\nCode\nconvex_hull = gdf_nodes[\"geometry\"].unary_union.convex_hull\nx, y = convex_hull.centroid.xy\ncentre_node = osmnx.distance.nearest_nodes(G, x[0], y[0])\np1 = geopandas.GeoSeries([Point(x[0], y[0])])\np2 = geopandas.GeoSeries(Point(G.nodes[centre_node][\"x\"],\n                               G.nodes[centre_node][\"y\"]))\n\n\nAnd we can make a sanity check plot\n\n\nCode\nax = gdf_nodes.plot(markersize = 0.75, figsize = (8, 16))\n\ngeopandas.GeoSeries([convex_hull]).plot(ax = ax, fc = \"#00000000\", ec = \"k\")\np1.plot(ax = ax, marker = \"o\", markersize = 50, color = \"k\")\np2.plot(ax = ax, marker = \"x\", markersize = 80, color = \"r\")"
  },
  {
    "objectID": "chapters/chap6/fig6-14-sb-drive-time.html#handling-the-edge-travel-times",
    "href": "chapters/chap6/fig6-14-sb-drive-time.html#handling-the-edge-travel-times",
    "title": "Figure 6.14 Relative time map of the Santa Barbara street network",
    "section": "Handling the edge travel times",
    "text": "Handling the edge travel times\nThe data in OSM networks is fairly ad hoc in this regard, so the below has been assembled by trial and error. There may be better tools available for cleaning up network data attributes.\nWe assume a default_speed of 30 km/h expressed in metres per minute (i.e. 500!). Where we find maximum speed information in the data we use that instead.\nWe assume a delay at intersections—this might not make total sense, but slows things down on major arterials.\nspeed_units_per_metre is the maxspeed attribute from OSM and for most jurisdictions is km, so 0.001 per metre.\n\n\nCode\ndefault_speed = 30 * 1000 / 60 # default driving speed in m / min\nintersection_delay = .33 # wait time at intersection in minutes\nunits_per_metre = 0.001\n\n\nSome hackery below to convert appropriately if maxspeed is missing or is a list of some kind or is expressed in mph.\n\n\nCode\n# add an edge attribute for time in minutes required to traverse each edge\nfor data in G.edges.values():\n    len_seg = data[\"length\"]\n    data[\"time\"] = len_seg / default_speed\n    if \"maxspeed\" in data:\n        max_speed = data[\"maxspeed\"]\n        if type(max_speed) is list:\n            max_speed = max_speed[0]\n        if \";\" in max_speed:\n            max_speed = max_speed.split(\";\")[0]\n        if \"mph\" in max_speed:\n            max_speed = max_speed.split()[0]\n            units_per_metre = 0.0006213712\n        if max_speed.isnumeric():\n            max_speed = float(max_speed)\n        data[\"time\"] = len_seg * units_per_metre / max_speed * 60\n    data[\"time\"] += intersection_delay\n\n\n\nCalculate node distances from centre node\nNow we can determine network travel times from our centre node to every other node. While assembling this notebook I encountered a problem with the networkx function single_source_path_length() function, which can be unreliable with floating point edge weights (in this cast the time attribute). As a workaround I am using igraph instead.\n\n\nCode\ncentre_node_index = [n for n in G.nodes].index(centre_node)\niG = igraph.Graph.from_networkx(G)\niG.vs[centre_node_index]\n\nnode_travel_times = dict(zip(\n  G.nodes, \n  iG.distances([centre_node_index], weights = \"time\", mode = \"all\")[0]))\n\n\nWe also need the bearings of every node from the centre node.\n\n\nCode\n# Assume that nodes have x and y attributes and these are in a projected\n# coordinate system such that simple trigonometry will give bearing\ndef bearing(G, n0, n1):\n    N0 = G.nodes[n0]\n    N1 = G.nodes[n1]\n    return n1, \\\n        math.atan2((N1[\"y\"] - N0[\"y\"]), (N1[\"x\"] - N0[\"x\"]))\n                 \nnode_bearings = dict(\n  [bearing(G, centre_node, n) for n in node_travel_times.keys()])\n\n\nand… a function to return \\(x\\) and \\(y\\) offsets from the centre node, given their distance and bearing.\n\n\nCode\ndef dxdy(d, b):\n    return d * math.cos(b), d * math.sin(b)\n\n\n\n\nDictionary of x y offsets from centre node indexed by node\nKeep in mind distances are now travel time based, while bearings remain ‘true’, so that less accessible locations are pushed farther from centre, and more accessible ones pulled nearer in the direction of the bearing. Note that all angles here are in radians.\n\n\nCode\nnode_dxdys = dict(\n  [(n, dxdy(node_travel_times[n], node_bearings[n])) \n   for n in node_travel_times.keys()])\n\n\n\n\nPut all this in a table for safe keeping!\n\n\nCode\nimport pandas\ndf_nodes = pandas.DataFrame(data = {\"osmid\": list(node_travel_times.keys())})\n\ndf_nodes[\"tx\"] = [node_dxdys[i][0] for i in df_nodes.osmid]\ndf_nodes[\"ty\"] = [node_dxdys[i][1] for i in df_nodes.osmid]\ndf_nodes[\"x\"] = [G.nodes[i][\"x\"] for i in df_nodes.osmid]\ndf_nodes[\"y\"] = [G.nodes[i][\"y\"] for i in df_nodes.osmid]\ndf_nodes[\"time\"] = [node_travel_times[i] for i in df_nodes.osmid]\n\ndf_nodes.head()\n\n\n\n\n\n\n\n\n\nosmid\ntx\nty\nx\ny\ntime\n\n\n\n\n0\n164707756\n-10.095840\n0.516131\n248112.235570\n3.813112e+06\n10.109025\n\n\n1\n164707812\n-10.891007\n-0.676010\n247856.180584\n3.812756e+06\n10.911967\n\n\n2\n165442802\n-10.533059\n0.734952\n248000.588151\n3.813176e+06\n10.558668\n\n\n3\n1467958591\n-9.136781\n-0.608773\n248676.344687\n3.812796e+06\n9.157039\n\n\n4\n165337776\n-11.392333\n-0.672562\n247771.128942\n3.812761e+06\n11.412169\n\n\n\n\n\n\n\nWrite this out to disk and read it back in. This means you can start here next time if you prefer…\n\n\nCode\ndf_nodes.to_csv(\"nodes.csv\", index = False)\ndf_nodes = pandas.read_csv(\"nodes.csv\")"
  },
  {
    "objectID": "chapters/chap6/fig6-14-sb-drive-time.html#now-make-geodataframes-and-maps",
    "href": "chapters/chap6/fig6-14-sb-drive-time.html#now-make-geodataframes-and-maps",
    "title": "Figure 6.14 Relative time map of the Santa Barbara street network",
    "section": "Now make GeoDataFrames and maps",
    "text": "Now make GeoDataFrames and maps\nThis is pretty simple now we have all the data.\n\n\nCode\nn_gdf_xy = geopandas.GeoDataFrame(\n  data = df_nodes[[\"time\"]], \n  geometry = geopandas.GeoSeries(\n    [Point(p[0], p[1]) for p in zip(df_nodes.x, df_nodes.y)]))\nn_gdf_xy.set_crs(CRS)\n\nn_gdf_txty = geopandas.GeoDataFrame(\n  data = df_nodes[[\"time\"]],\n  geometry = geopandas.GeoSeries(\n    [Point(p[0], p[1]) for p in zip(df_nodes.tx, df_nodes.ty)]))\n\n\nAnd make two maps of the nodes.\n\n\nCode\nfig = plt.figure(figsize = (16, 8))\n\nax = fig.add_subplot(121)\nn_gdf_xy.plot(ax = ax, column = \"time\", markersize = 2)\nax.set_title(\"Santa Barbara in geodetic space\")\n\nax = fig.add_subplot(122)\nn_gdf_txty.plot(ax = ax, column = \"time\", markersize = 2)\nax.set_title(\"Santa Barbara in drivetime space\")\n\n\nText(0.5, 1.0, 'Santa Barbara in drivetime space')"
  },
  {
    "objectID": "chapters/chap6/fig6-14-sb-drive-time.html#plots-that-include-the-edges",
    "href": "chapters/chap6/fig6-14-sb-drive-time.html#plots-that-include-the-edges",
    "title": "Figure 6.14 Relative time map of the Santa Barbara street network",
    "section": "Plots that include the edges",
    "text": "Plots that include the edges\n\nStandard map\nThe geodetic one is easy—just use the osmnx plotting function\n\n\nCode\nosmnx.plot_graph(G, node_color = \"k\", node_size = 2, figsize = (12, 8),\n                           edge_color = \"k\", edge_linewidth = 0.5, \n                           bgcolor = \"w\")\n\n\n\n\n\n\n\n\n\n\n\nTime based is trickier…\nFirst we need to make a new graph with the time based positions as the node positions\n\n\nCode\nG_time = G.copy()\n\nfor n, dxdy in node_dxdys.items():\n    G_time.nodes()[n][\"x\"] = dxdy[0]\n    G_time.nodes()[n][\"y\"] = dxdy[1]\n\n\nNow… for reasons unclear to me, simply plotting this using osmnx will not work—presumably (yet again!) something to do with projections. Instead we need to make a matplotlib LineCollection and plot that… so here goes…\n\n\nCode\n# define the plot limits\nnode_xs = [float(n[\"x\"]) for n in G_time.nodes.values()]\nnode_ys = [float(n[\"y\"]) for n in G_time.nodes.values()]\n\nW, S, E, N = (min(node_xs) - 1, min(node_ys) - 1,\n              max(node_xs) + 1, max(node_ys) + 1)\nbbox_aspect = (N - S) / (E - W)\nfig_h = 12\nfig_w = 12 / bbox_aspect\n\n# create the figure and axis\nfig, ax = plt.subplots(figsize = (fig_w, fig_h))\nax.set_xlim(W, E)\nax.set_ylim(S, N)\nax.set_aspect(\"equal\")\n\nlines = []\nfor u, v, data in G_time.edges.keys():\n    lines.append([(G_time.nodes[u][\"x\"], G_time.nodes[u][\"y\"]),\n                  (G_time.nodes[v][\"x\"], G_time.nodes[v][\"y\"])])\n\nfrom matplotlib.collections import LineCollection\nax.add_collection(LineCollection(lines, colors = \"k\", linewidth = .5))\nplt.axis(\"off\")\n\n\n(-24.923310674353207,\n 27.844793379718062,\n -19.572596660049093,\n 21.215954647646313)"
  },
  {
    "objectID": "chapters/chap6/questions-6.html",
    "href": "chapters/chap6/questions-6.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by Andy Mabbet used under a Creative Commons Attribution-Share Alike 4.0 International license\nEverything is related to everything else, but… wait, what?\nIs everything a network?\nIt’s easy to start thinking of everything as a network, which quickly leads to… “well, if everything is a network, then nothing is” and other such philosophical conundrums. When does network thinking fall down and stop being a useful frame?\n“but near things are more related than distant things”\nWhat should we understand by “near” in the much quoted second clause of Tobler’s dictum?1\nHow do networks as most often understood in giscience differ from networks in actor-network theory?\nTo address this question consider the notion of ‘flat ontology’ discussed at various points in the book.2\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/questions-6.html#footnotes",
    "href": "chapters/chap6/questions-6.html#footnotes",
    "title": "Discussion questions",
    "section": "References",
    "text": "References\n\n\nTobler WR. 1970. A computer movie simulating urban growth in the Detroit region. Economic Geography, 46(Supp. 1), 234–240.↩︎\nThe index is your friend…↩︎"
  },
  {
    "objectID": "chapters/chap6/links-6.html",
    "href": "chapters/chap6/links-6.html",
    "title": "Links for Chapter 6",
    "section": "",
    "text": "Footnote 5\nThe number of possible shortest paths, i.e., pairs of vertices, choosable from a graph of any given size is given by the numbers in integer sequence A000522.\n\n\nFootnote 6\nThe World City Network basic data set is available at the Globalisation and World Cities Research Network website. These data are used in figures 6.5, 6.6, and 6.13.\n\n\nFigure 6.5\nSee Footnote 6 above.\n\n\nFigure 6.6\nSee Footnote 6 above.\n\n\nFootnote 8\nStirling numbers of the 2nd kind are in integer sequence A008277. You can obtain values of these numbers at this web page and there’s a nice explanation of what they are here.\n\n\nFigure 6.7\nThe trade data used in this Figure and in Figure 6.9 are version 3 of the trade data currently available from the Correlates of War website.\n\n\nFigure 6.9\nSee Figure 6.7 above.\n\n\nFigure 6.13\nSee Footnote 6 above.\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/fig6-11-small-world-2d.html",
    "href": "chapters/chap6/fig6-11-small-world-2d.html",
    "title": "Figure 6.11 The small world rewiring process in two dimensions",
    "section": "",
    "text": "Here the small world network phenomenon based on ‘rewiring’ is shown for a two-dimensional lattice. This particular network structure is less studied than might be expected, and can be considered a very simplified model for how even a small number of more rapid connections between places in a transportation network can dramatically alter its overall characteristics.\nCode\nlibrary(igraph)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(scales)\nlibrary(ggplot2)\nCode\nplot_graph &lt;- function(G, main = \"\", layout = layout.grid(G), \n                       vertex.color = \"black\") {\n  plot(G, main = main,\n       layout = layout, \n       vertex.label = NA, vertex.color = vertex.color, vertex.size = 5, \n       vertex.shape = \"circle\", vertex.lwd = 0, \n       edge.color = \"black\", edge.width = 0.5)\n}\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap6/fig6-11-small-world-2d.html#sample-rewired-2d-lattices",
    "href": "chapters/chap6/fig6-11-small-world-2d.html#sample-rewired-2d-lattices",
    "title": "Figure 6.11 The small world rewiring process in two dimensions",
    "section": "Sample rewired 2D lattices",
    "text": "Sample rewired 2D lattices\nIt’s somewhat useful to see what a range of rewired lattices look like. Here’s a bigger range than in the book, with the rewiring probability increasing roughly 3-fold each time.\n\n\nCode\npar(mar = rep(1, 4))\nlayout(matrix(1:6, nrow = 2, byrow = TRUE))\n\nbase_graph &lt;- make_lattice(length = 20, dim = 2, nei = 2)\n\nplot_graph(rewire(base_graph, each_edge(0.003)), main = \"p = 0.003\")\nplot_graph(rewire(base_graph, each_edge(0.009)), main = \"p = 0.009\")\nplot_graph(rewire(base_graph, each_edge(0.027)), main = \"p = 0.027\")\nplot_graph(rewire(base_graph, each_edge(0.083)), main = \"p = 0.083\")\nplot_graph(rewire(base_graph, each_edge(0.250)), main = \"p = 0.25\")\nplot_graph(rewire(base_graph, each_edge(0.750)), main = \"p = 0.75\")"
  },
  {
    "objectID": "chapters/chap6/fig6-11-small-world-2d.html#looking-at-a-wider-range-of-rewiring-outcomes",
    "href": "chapters/chap6/fig6-11-small-world-2d.html#looking-at-a-wider-range-of-rewiring-outcomes",
    "title": "Figure 6.11 The small world rewiring process in two dimensions",
    "section": "Looking at a wider range of rewiring outcomes",
    "text": "Looking at a wider range of rewiring outcomes\nBelow is code to make the other part of Figure 16.11, which shows how mean clustering coefficient and path lengths vary over a wide range of rewiring probablities. The range of probabilities shown here is different than in the published figure, with more of the samples in the middle range of the plot.\n\n\nCode\nprobs          &lt;- 10 ^ rnorm(1000, -3)\nprobs          &lt;- probs[which(between(probs, 0, 1))]\nkeepers        &lt;- c()\ncluster_coeffs &lt;- c()\nmean_path_lens &lt;- c()\n\nfor (i in seq_along(probs)) {\n  the_graph &lt;- rewire(base_graph, each_edge(probs[i]))\n  if (components(the_graph)$no == 1) {\n    cluster_coeffs &lt;- c(cluster_coeffs, \n                        transitivity(the_graph, type = \"average\"))\n    mean_path_lens &lt;- c(mean_path_lens, \n                        mean(distances(the_graph)))\n    keepers        &lt;- c(keepers, i)\n  }\n}\nprobs &lt;- probs[keepers]\n\ndf &lt;- data.frame(p   = probs, \n                 cc  = cluster_coeffs, \n                 mpl = mean_path_lens) |&gt; \n  mutate(cc = rescale(cc, to = c(0, 1)), \n         mpl = rescale(mpl, to = c(0, 1))) |&gt; \n  # remove first item, p=0 and not plottable\n  pivot_longer(-p) |&gt;\n  rename(Metric = name)"
  },
  {
    "objectID": "chapters/chap6/fig6-11-small-world-2d.html#how-mean-path-length-and-clustering-coefficient-diverge",
    "href": "chapters/chap6/fig6-11-small-world-2d.html#how-mean-path-length-and-clustering-coefficient-diverge",
    "title": "Figure 6.11 The small world rewiring process in two dimensions",
    "section": "How mean path length and clustering coefficient diverge",
    "text": "How mean path length and clustering coefficient diverge\nThere is wide range of rewiring probabilities where ‘small world’ characteristic of surprising short mean path lengths in the presence of strong local clustering is evident (note the log-scale on the horizontal axis).\n\n\nCode\nggplot(df, aes(x = p, y = value, colour = Metric)) + \n  geom_point(cex = .8, alpha = 0.5) + \n  scale_x_log10() +\n  scale_colour_brewer(palette = \"Dark2\", \n                      labels = c(\"cluster_coeffs coeff.\", \"Mean path length\")) +\n  xlab(\"Probability of rewiring\") +\n  ylab(\"Value relative to base lattice\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap6/fig6-12-graph-drawings.html",
    "href": "chapters/chap6/fig6-12-graph-drawings.html",
    "title": "Figure 6.12 A simple graph drawn nine different ways",
    "section": "",
    "text": "The main difference here is that the output is in colour, which might make it easier to see what’s going on.\n\n\nCode\nlibrary(igraph)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(ggplot2)\n\n\n\n\nCode\nplot_graph &lt;- function(G, main = \"\", layout = layout.grid(G), \n                       vertex.color = \"black\") {\n  plot(G, main = main,\n       layout = layout, \n       vertex.label = NA, vertex.color = vertex.color, vertex.size = 5, \n       vertex.shape = \"circle\", vertex.frame.width = 0, \n       edge.color = \"black\", edge.width = 0.5)\n}\n\n\n\n\nCode\nthe_graph &lt;- make_lattice(length = 20, dim = 2, nei = 1)\nthe_graph &lt;- rewire(the_graph, each_edge(1/400))\nvertex_attr(the_graph, 'centrality') &lt;- centralization.closeness(the_graph)$res\n\n# make a bespoke colour for each vertex based on centrality\nbase_pal &lt;- brewer.pal(11, 'RdYlBu')\npal = colorRampPalette(base_pal)\ngraphCol = pal(500)[as.numeric(cut(V(the_graph)$centrality, breaks = 500))]\n\npar(mar = rep(1, 4))\nlayout(matrix(1:9, 3, 3, byrow = TRUE))\n\nplot_graph(the_graph, layout = layout_randomly(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout.circle(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout_with_mds(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout_as_tree(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, vertex.color = graphCol)\nplot_graph(the_graph, layout = layout_as_tree(the_graph, circular = TRUE), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout.kamada.kawai(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout.drl(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout.fruchterman.reingold(the_graph), vertex.color = graphCol)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap1/index.html",
    "href": "chapters/chap1/index.html",
    "title": "Chapter 1",
    "section": "",
    "text": "Chapter 1 sets out the overall plan of the book, putting it in the context of my own history with doing giscience in (often distant) relation to the rest of geography.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks for Chapter 1\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion questions\n\n\n\nquestions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap8/fig8-04-voter-model.html",
    "href": "chapters/chap8/fig8-04-voter-model.html",
    "title": "Figure 8.4 A voter model CA",
    "section": "",
    "text": "The example in the book was made using a NetLogo model based on this model from Spatial Simulation, but this page provides R code instead.\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(data.table)\nlibrary(ggplot2)\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap8/fig8-04-voter-model.html#model-code",
    "href": "chapters/chap8/fig8-04-voter-model.html#model-code",
    "title": "Figure 8.4 A voter model CA",
    "section": "Model code",
    "text": "Model code\nThe model code is in the cell below. It returns a 3D array of cell states, with each ‘layer’ a new 2D array of cell states.\n\n\nCode\n# random neighbour offset\nrandom_offset &lt;- function() {\n  c(1, 0, -1, 0, 0, 1, 0, -1)[0:1 + sample(c(1, 3, 5, 7), 1)]\n}\n\n# get a random cell in a matrix\nrandom_cell &lt;- function(m) {\n  c(sample(seq_len(nrow(m)), 1), sample(seq_len(ncol(m)), 1))\n}\n\n# make nr * nc random local updates\ngeneration &lt;- function(m) {\n  nr &lt;- nrow(m)\n  nc &lt;- ncol(m)\n  random_coords &lt;- replicate(nc * nr, random_cell(m))\n  random_offsets &lt;- replicate(nc * nr, random_offset())\n  for (i in 1:(nr * nc)) {\n    coords &lt;- random_coords[, i]\n    offset &lt;- random_offsets[, i]\n    nbr &lt;- ((coords + offset - 1) %% c(nr, nc)) + 1\n    m[coords[1], coords[2]] &lt;- m[nbr[1], nbr[2]]\n  }\n  return(m)\n}\n\n# initialise random matrix\ninit_state &lt;- function(s, nr, nc) {\n  matrix(sample(s, nr * nc, replace = TRUE),\n         ncol = nc, nrow = nr)\n}\n\nvoter_model &lt;- function(states = 1:2, ncol = 20, nrow = 20, \n                        t_max = 20, seed = NULL) {\n  set.seed(seed)\n  result &lt;- array(0, dim = c(nrow, ncol, t_max))\n  result[, , 1] &lt;- init_state(states, nrow, ncol)\n  for (gen in 2:t_max) {\n    result[, , gen] &lt;- generation(result[, , gen - 1])\n  }\n  result\n}"
  },
  {
    "objectID": "chapters/chap8/fig8-04-voter-model.html#run-the-model",
    "href": "chapters/chap8/fig8-04-voter-model.html#run-the-model",
    "title": "Figure 8.4 A voter model CA",
    "section": "Run the model",
    "text": "Run the model\nWe run the model and convert it into a dataframe to make it easier to plot.\n\n\nCode\nnum_states &lt;- 3\nwidth &lt;- 40\nheight &lt;- 40\ntime_steps &lt;- 100\n\nvma_df &lt;- voter_model(1:num_states, ncol = width, nrow = height, \n                      t_max = time_steps) |&gt;\n  as.data.table() |&gt;\n  as_tibble() |&gt;\n  rename(x = V1, y = V2, t = V3, num = value) |&gt;\n  mutate(state = as.factor(num))"
  },
  {
    "objectID": "chapters/chap8/fig8-04-voter-model.html#plotting",
    "href": "chapters/chap8/fig8-04-voter-model.html#plotting",
    "title": "Figure 8.4 A voter model CA",
    "section": "Plotting",
    "text": "Plotting\nThe dataframe has attributes x, y, t, and state, which are most easily plotted as a sequence of model snapshots using ggplot2::facet_wrap.\n\n\nCode\nggplot(vma_df |&gt; filter(t %in% 2:21)) + \n  geom_raster(aes(x = x, y = y, fill = state), show.legend = FALSE) + \n  scale_fill_brewer(palette = \"Accent\") +\n  coord_equal() +\n  facet_wrap( ~ t, ncol = 5) +\n  theme_void() + \n  theme(strip.background = element_blank(),\n        strip.text.x = element_blank())\n\n\n\n\n\n\n\n\n\n\nAn animation\nWe can also make a movie…\n\n\nCode\nlibrary(gganimate)\n\nanim &lt;- ggplot(vma_df) + \n  geom_raster(aes(x = x, y = y, fill = state), show.legend = FALSE) + \n  scale_fill_brewer(palette = \"Accent\") +\n  coord_equal() +\n  transition_manual(t) + \n  labs(title = \"Step: {frame}\") +\n  theme_void()\n        \nanim &lt;- animate(anim, nframes = 100, fps = 4)\nanim_save(\"voter.gif\", anim)\n\n\n\n\n\nCode\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "chapters/chap8/links-8.html",
    "href": "chapters/chap8/links-8.html",
    "title": "Links for Chapter 8",
    "section": "",
    "text": "Figure 8.4\nThe XKCD comic marking the passing of John Conway is at xkcd.com.\n\n\nFootnote 14\nCosma Shalizi’s notes on D’Arcy Thompson are at http://bactra.org/notebooks/darcy-thompson.html (yes http, not https). Attention preservation notice: Cosma Shalizi’s website is a rabbithole!\n\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "chapters/chap8/questions-8.html",
    "href": "chapters/chap8/questions-8.html",
    "title": "Discussion questions",
    "section": "",
    "text": "Image by Noah Wulf used under a Creative Commons Attribution-Share Alike 4.0 International license\n\n\n\nIt’s not about time, it’s about becoming…\n\nSo do these kinds of dynamic models—cellular automata and ABMs—really address the process problem?\nI’ve personally invested a lot of time and effort in making cellular automaton and agent-based models, and even I’m not entirely convinced. Why might we be skeptical of a claim that they capture ‘process’.\n\nIf not CA and ABMs, then what?\nCan we do better? What about the much-vaunted digital twins? What failing do any of these representations share?\n\nSetting aside for now what they might look like, in what ways might more process-oriented platforms be useful?\nWhat kinds of things is GIS bad at that more process-oriented approaches would be better at?\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computing Geographically",
    "section": "",
    "text": "This website provides a collection of resources for the book O’Sullivan D. 2024. Computing Geographically: Bridging Giscience and Geography (Guilford Press, New York).\nIncluded are:\n\nUpdated links for internet sources referenced in the text, which are regularly checked;\nCode samples to create alternative (often colour) versions of some of the figures;\nBackground information on other figures;\nHigh resolution copies of all the figures from the book as published, freely available to download; and\nOther odds and ends about writing the book and related thoughts and musings.\n\n\n\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "the-figures/index.html",
    "href": "the-figures/index.html",
    "title": "The published figures",
    "section": "",
    "text": "Below you will find high resolution copies of all the figures from the book, as published. Download using right-click Save Link As… (Link is important: you’ll get a low resolution thumbnail if you do Save Image As…).\nNote that Figure 5.2 is available from wikimedia.commons at this link.\n\n\n\n\n\n\n\n\nFigure 2.1\n\n\n\n\n\n\n\nFigure 2.2\n\n\n\n\n\n\n\nFigure 2.3\n\n\n\n\n\n\n\nFigure 2.4\n\n\n\n\n\n\n\nFigure 2.5\n\n\n\n\n\n\n\nFigure 2.6\n\n\n\n\n\n\n\nFigure 2.7\n\n\n\n\n\n\n\n\n\nFigure 2.8\n\n\n\n\n\n\n\nFigure 2.9\n\n\n\n\n\n\n\nFigure 3.1\n\n\n\n\n\n\n\nFigure 3.2\n\n\n\n\n\n\n\nFigure 3.3\n\n\n\n\n\n\n\nFigure 3.4\n\n\n\n\n\n\n\nFigure 3.5\n\n\n\n\n\n\n\n\n\nFigure 3.6\n\n\n\n\n\n\n\nFigure 3.7\n\n\n\n\n\n\n\nFigure 3.8\n\n\n\n\n\n\n\nFigure 3.9\n\n\n\n\n\n\n\nFigure 3.10\n\n\n\n\n\n\n\nFigure 3.11\n\n\n\n\n\n\n\nFigure 4.1\n\n\n\n\n\n\n\n\n\nFigure 4.2\n\n\n\n\n\n\n\nFigure 4.3\n\n\n\n\n\n\n\nFigure 4.4\n\n\n\n\n\n\n\nFigure 4.5\n\n\n\n\n\n\n\nFigure 4.6\n\n\n\n\n\n\n\nFigure 5.1\n\n\n\n\n\n\n\nFigure 5.3\n\n\n\n\n\n\n\n\n\nFigure 5.4\n\n\n\n\n\n\n\nFigure 5.5\n\n\n\n\n\n\n\nFigure 5.6\n\n\n\n\n\n\n\nFigure 5.7\n\n\n\n\n\n\n\nFigure 5.8\n\n\n\n\n\n\n\nFigure 5.9\n\n\n\n\n\n\n\nFigure 5.10\n\n\n\n\n\n\n\n\n\nFigure 6.1\n\n\n\n\n\n\n\nFigure 6.2\n\n\n\n\n\n\n\nFigure 6.3\n\n\n\n\n\n\n\nFigure 6.4\n\n\n\n\n\n\n\nFigure 6.5\n\n\n\n\n\n\n\nFigure 6.6\n\n\n\n\n\n\n\nFigure 6.7\n\n\n\n\n\n\n\n\n\nFigure 6.8\n\n\n\n\n\n\n\nFigure 6.9\n\n\n\n\n\n\n\nFigure 6.10\n\n\n\n\n\n\n\nFigure 6.11\n\n\n\n\n\n\n\nFigure 6.12\n\n\n\n\n\n\n\nFigure 6.13\n\n\n\n\n\n\n\nFigure 6.14\n\n\n\n\n\n\n\n\n\nFigure 7.1\n\n\n\n\n\n\n\nFigure 7.2\n\n\n\n\n\n\n\nFigure 7.3\n\n\n\n\n\n\n\nFigure 7.4\n\n\n\n\n\n\n\nFigure 7.5\n\n\n\n\n\n\n\nFigure 7.6\n\n\n\n\n\n\n\nFigure 7.7\n\n\n\n\n\n\n\n\n\nFigure 8.1\n\n\n\n\n\n\n\nFigure 8.2\n\n\n\n\n\n\n\nFigure 8.3\n\n\n\n\n\n\n\nFigure 8.4\n\n\n\n\n\n\n\nFigure 8.5\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "the-figures/index.html#all-the-figures",
    "href": "the-figures/index.html#all-the-figures",
    "title": "The published figures",
    "section": "",
    "text": "Below you will find high resolution copies of all the figures from the book, as published. Download using right-click Save Link As… (Link is important: you’ll get a low resolution thumbnail if you do Save Image As…).\nNote that Figure 5.2 is available from wikimedia.commons at this link.\n\n\n\n\n\n\n\n\nFigure 2.1\n\n\n\n\n\n\n\nFigure 2.2\n\n\n\n\n\n\n\nFigure 2.3\n\n\n\n\n\n\n\nFigure 2.4\n\n\n\n\n\n\n\nFigure 2.5\n\n\n\n\n\n\n\nFigure 2.6\n\n\n\n\n\n\n\nFigure 2.7\n\n\n\n\n\n\n\n\n\nFigure 2.8\n\n\n\n\n\n\n\nFigure 2.9\n\n\n\n\n\n\n\nFigure 3.1\n\n\n\n\n\n\n\nFigure 3.2\n\n\n\n\n\n\n\nFigure 3.3\n\n\n\n\n\n\n\nFigure 3.4\n\n\n\n\n\n\n\nFigure 3.5\n\n\n\n\n\n\n\n\n\nFigure 3.6\n\n\n\n\n\n\n\nFigure 3.7\n\n\n\n\n\n\n\nFigure 3.8\n\n\n\n\n\n\n\nFigure 3.9\n\n\n\n\n\n\n\nFigure 3.10\n\n\n\n\n\n\n\nFigure 3.11\n\n\n\n\n\n\n\nFigure 4.1\n\n\n\n\n\n\n\n\n\nFigure 4.2\n\n\n\n\n\n\n\nFigure 4.3\n\n\n\n\n\n\n\nFigure 4.4\n\n\n\n\n\n\n\nFigure 4.5\n\n\n\n\n\n\n\nFigure 4.6\n\n\n\n\n\n\n\nFigure 5.1\n\n\n\n\n\n\n\nFigure 5.3\n\n\n\n\n\n\n\n\n\nFigure 5.4\n\n\n\n\n\n\n\nFigure 5.5\n\n\n\n\n\n\n\nFigure 5.6\n\n\n\n\n\n\n\nFigure 5.7\n\n\n\n\n\n\n\nFigure 5.8\n\n\n\n\n\n\n\nFigure 5.9\n\n\n\n\n\n\n\nFigure 5.10\n\n\n\n\n\n\n\n\n\nFigure 6.1\n\n\n\n\n\n\n\nFigure 6.2\n\n\n\n\n\n\n\nFigure 6.3\n\n\n\n\n\n\n\nFigure 6.4\n\n\n\n\n\n\n\nFigure 6.5\n\n\n\n\n\n\n\nFigure 6.6\n\n\n\n\n\n\n\nFigure 6.7\n\n\n\n\n\n\n\n\n\nFigure 6.8\n\n\n\n\n\n\n\nFigure 6.9\n\n\n\n\n\n\n\nFigure 6.10\n\n\n\n\n\n\n\nFigure 6.11\n\n\n\n\n\n\n\nFigure 6.12\n\n\n\n\n\n\n\nFigure 6.13\n\n\n\n\n\n\n\nFigure 6.14\n\n\n\n\n\n\n\n\n\nFigure 7.1\n\n\n\n\n\n\n\nFigure 7.2\n\n\n\n\n\n\n\nFigure 7.3\n\n\n\n\n\n\n\nFigure 7.4\n\n\n\n\n\n\n\nFigure 7.5\n\n\n\n\n\n\n\nFigure 7.6\n\n\n\n\n\n\n\nFigure 7.7\n\n\n\n\n\n\n\n\n\nFigure 8.1\n\n\n\n\n\n\n\nFigure 8.2\n\n\n\n\n\n\n\nFigure 8.3\n\n\n\n\n\n\n\nFigure 8.4\n\n\n\n\n\n\n\nFigure 8.5"
  },
  {
    "objectID": "other-stuff/giscience-not-GIScience.html",
    "href": "other-stuff/giscience-not-GIScience.html",
    "title": "Giscience? not GIScience?!",
    "section": "",
    "text": "Update History\n\n\n\n\n\n\n\n\nDate\nChanges\n\n\n\n\n2024-04-26\nFixed minor typo.\n\n\n2024-01-12\nFixed minor typo.\n\n\n2023-10-25\nAdded update history.\n\n\n2023-10-24\nInitial post.\nAt the risk of getting into “someone is wrong on the internet” conversations, here’s why I used giscience not GIScience throughout Computing Geographically.\n© 2023-25 David O’Sullivan"
  },
  {
    "objectID": "other-stuff/giscience-not-GIScience.html#words-are-what-we-make-of-them",
    "href": "other-stuff/giscience-not-GIScience.html#words-are-what-we-make-of-them",
    "title": "Giscience? not GIScience?!",
    "section": "Words are what we make of them",
    "text": "Words are what we make of them\nEarly in the writing of the book, by which I mean as far back as 2018, the ‘word’ GIScience with its excess of upper case letters started to bother me. It looks odd (to me anyway) on the page, and also strangely exceptional. There are not many words like that in this or any other book (GISer is an exception, about which more below). In any case, it felt strange to me to use this oddly commercial construction, familiar from the tech world, for a subdiscipline in geography.\nAnd I was going to be using the word, or whatever that collection of letters is, a lot, so if it bothered me, I had to find a solution.\nOne option was simply not to abbreviate geographical information science—or is it geographic information science? That might be the correct answer. But oh my! It would likely add a couple of pages to the book to no great purpose, and it’s such a mouthful!\nTentatively (and somewhat reluctantly), I experimented with treating giscience as a normal word, and after a while it looked right to me, and I even started to like it. I decided to stick with that choice and I am happy with it. If it bothers some people, I think that’s their problem not mine. Language changes and evolves all the time. In this instance, I am being intentional about my part in that change. I note that GIScience at the time of writing (late 2023), unlike GIS, has yet to make it into the Oxford English Dictionary. That, at the very least, leaves things up for grabs, when it comes to ‘correct’ usage.\nThere is a slightly tongue-in-cheek footnote on the very first page proper (after a footnote about GIS) discussing some of this, and even suggesting that we pronounce giscience to rhyme with omniscience. If it’s not obvious, I don’t expect anybody to do this. I also really don’t care if readers mentally edit giscience to read GIScience (does the latter involve inner YELLING?) or if they expand the contraction to geographic(al) information science every time they see it in print.\nAnd of course, it’s not up to me how readers read the book (§How to Read the Book notwithstanding), or how they go on from there. Capitalise that word as you see fit! Giscience works for me.\n\nOn geographic(al) information science\nA significant motive for the geographical information science coinage was a quest for academic respectability1 following the funding by the US National Science Foundation of the National Center for Geographic Information and Analysis. This made all kinds of sense at the time. I remember as a PhD student hearing the argument pithily summarised with the phrase (attributed perhaps apocryphally to Stan Openshaw), “there aren’t any Excel conferences, so why would they be GIS ones?” Well quite. Stan was an advocate for geocomputation and that’s a label that I would be happier with, although its usefulness is a bit accidental, depending as it does on the the brevity of the ‘geo-’ prefix as Helen Couclelis has pointed out.2\nSince that coinage ‘geographical information science’ has often been associated with a boundary policing anxiety to distinguish geographical information science (a real science) from geographical information systems (just people using a particular software platform). I understand the distinction people are attempting to make when they insist on the difference, but it is a distinction that is ambiguous at best, incoherent at worst, and often simply impossible to make. As a long-time associate editor at International Journal of Geographical Information Science, one time co-editor of Transactions in GIS, frequent member of the Program Committee of the GIScience conference series, and erstwhile Professor of Geography and uh… Geographic(al) Information Geospatial Science, I have rarely found the distinction useful.\nThe other problem with geographical information science (for me at least) is that it attaches giscience too closely to computer science and information science. That might be a more comfortable home for some. Geoinformatics departments and schools seem particularly common in Europe, and that’s great: a lot of good work is done in those settings, and some of it shows up throughout the book. The problem with being close to computer science is being absorbed into that much larger, and, let’s face it, for the most part more technically accomplished community, and losing sight of the geographical aspects of giscience. A central concern of Computing Geographically is that giscience should not lose that connection.\n\n\nOn GISers\nBut, I hear you ask, what about GISer? Well yeah… about that. I really like the term GISer. And for whatever reason, probably its lack of pretense, it doesn’t bother me like GIScience does. Anyone who engages geography using computers and georeferenced data can be a GISer. There is no requirement to be advancing some nebulous science of how to do geographical computing implied in being a GISer. GISer is somehow democratic and inclusive, where giscience (however it is capitalised) is not.\nWhat can I say? My book, my rules!"
  },
  {
    "objectID": "other-stuff/giscience-not-GIScience.html#neither-giscience-nor-giscience-but-geographical-computing",
    "href": "other-stuff/giscience-not-GIScience.html#neither-giscience-nor-giscience-but-geographical-computing",
    "title": "Giscience? not GIScience?!",
    "section": "Neither giscience nor GIScience but geographical computing!",
    "text": "Neither giscience nor GIScience but geographical computing!\nIf the book doesn’t make it obvious, I’d much prefer us to use geographical computing as a label for whatever it is we are doing when we work with computers while studying geography. Geocomputation for all its virtues is altogether too computational, and as the book argues at some length, giscience is geography anyway!"
  },
  {
    "objectID": "other-stuff/giscience-not-GIScience.html#footnotes",
    "href": "other-stuff/giscience-not-GIScience.html#footnotes",
    "title": "Giscience? not GIScience?!",
    "section": "References",
    "text": "References\n\n\nGoodchild MF. 1992. Geographical information science. International Journal of Geographical Information Systems 6(1) 31–45.↩︎\nCouclelis H. 1998. Geocomputation in context. In Geocomputation: A Primer, PA Longley, SM Brooks, R McDonnell, and WD Macmillan (eds), 17–29. Wiley.↩︎"
  },
  {
    "objectID": "other-stuff/rosa-support-cat.html",
    "href": "other-stuff/rosa-support-cat.html",
    "title": "Rosa, support cat",
    "section": "",
    "text": "Update History\n\n\n\n\n\n\n\n\nDate\nChanges\n\n\n\n\n2023-10-27\nInitial post.\n\n\n\n\n\n\nI know it sounds a bit daft, but I don’t know if I would have finished writing this book if it were not for Rosa Luxemburg-Parks, pictured below. Ever-present in the room I was writing in, she insisted on me getting to my desk at a sensible time every morning, and then just hung out, mostly dozing, and not clambering all over the keyboard or doing any of those other cats-on-the-internet things.\n\nThat’s all.\n\n\n\n© 2023-25 David O’Sullivan"
  }
]